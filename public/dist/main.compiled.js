/*! For license information please see main.compiled.js.LICENSE.txt */
!function(){var e={137:function(e,t,n){"use strict";function r(e,t,n,r,o,a,i){try{var s=e[a](i),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}function o(e){return function(){var t=this,n=arguments;return new Promise((function(o,a){var i=e.apply(t,n);function s(e){r(i,o,a,s,u,"next",e)}function u(e){r(i,o,a,s,u,"throw",e)}s(void 0)}))}}n.d(t,{Z:function(){return o}})},757:function(e,t,n){e.exports=n(666)},750:function(e,t,n){"use strict";n.r(t),n.d(t,{afterMain:function(){return k},afterRead:function(){return b},afterWrite:function(){return x},applyStyles:function(){return A},arrow:function(){return K},auto:function(){return s},basePlacements:function(){return u},beforeMain:function(){return w},beforeRead:function(){return v},beforeWrite:function(){return T},bottom:function(){return o},clippingParents:function(){return f},computeStyles:function(){return $},createPopper:function(){return Ce},createPopperBase:function(){return Me},createPopperLite:function(){return Oe},detectOverflow:function(){return ge},end:function(){return l},eventListeners:function(){return te},flip:function(){return ve},hide:function(){return we},left:function(){return i},main:function(){return _},modifierPhases:function(){return D},offset:function(){return _e},placements:function(){return g},popper:function(){return h},popperGenerator:function(){return Se},popperOffsets:function(){return ke},preventOverflow:function(){return Te},read:function(){return y},reference:function(){return m},right:function(){return a},start:function(){return c},top:function(){return r},variationPlacements:function(){return p},viewport:function(){return d},write:function(){return E}});var r="top",o="bottom",a="right",i="left",s="auto",u=[r,o,a,i],c="start",l="end",f="clippingParents",d="viewport",h="popper",m="reference",p=u.reduce((function(e,t){return e.concat([t+"-"+c,t+"-"+l])}),[]),g=[].concat(u,[s]).reduce((function(e,t){return e.concat([t,t+"-"+c,t+"-"+l])}),[]),v="beforeRead",y="read",b="afterRead",w="beforeMain",_="main",k="afterMain",T="beforeWrite",E="write",x="afterWrite",D=[v,y,b,w,_,k,T,E,x];function L(e){return e?(e.nodeName||"").toLowerCase():null}function S(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function M(e){return e instanceof S(e).Element||e instanceof Element}function C(e){return e instanceof S(e).HTMLElement||e instanceof HTMLElement}function O(e){return"undefined"!=typeof ShadowRoot&&(e instanceof S(e).ShadowRoot||e instanceof ShadowRoot)}var A={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},o=t.elements[e];C(o)&&L(o)&&(Object.assign(o.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?o.removeAttribute(e):o.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],o=t.attributes[e]||{},a=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});C(r)&&L(r)&&(Object.assign(r.style,a),Object.keys(o).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]};function N(e){return e.split("-")[0]}function I(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function j(e){var t=I(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function q(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&O(n)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function P(e){return S(e).getComputedStyle(e)}function H(e){return["table","td","th"].indexOf(L(e))>=0}function Y(e){return((M(e)?e.ownerDocument:e.document)||window.document).documentElement}function U(e){return"html"===L(e)?e:e.assignedSlot||e.parentNode||(O(e)?e.host:null)||Y(e)}function R(e){return C(e)&&"fixed"!==P(e).position?e.offsetParent:null}function F(e){for(var t=S(e),n=R(e);n&&H(n)&&"static"===P(n).position;)n=R(n);return n&&("html"===L(n)||"body"===L(n)&&"static"===P(n).position)?t:n||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&C(e)&&"fixed"===P(e).position)return null;for(var n=U(e);C(n)&&["html","body"].indexOf(L(n))<0;){var r=P(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}function W(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}var B=Math.max,z=Math.min,Q=Math.round;function X(e,t,n){return B(e,z(t,n))}function G(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function Z(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}var K={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,s=e.name,c=e.options,l=n.elements.arrow,f=n.modifiersData.popperOffsets,d=N(n.placement),h=W(d),m=[i,a].indexOf(d)>=0?"height":"width";if(l&&f){var p=function(e,t){return G("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:Z(e,u))}(c.padding,n),g=j(l),v="y"===h?r:i,y="y"===h?o:a,b=n.rects.reference[m]+n.rects.reference[h]-f[h]-n.rects.popper[m],w=f[h]-n.rects.reference[h],_=F(l),k=_?"y"===h?_.clientHeight||0:_.clientWidth||0:0,T=b/2-w/2,E=p[v],x=k-g[m]-p[y],D=k/2-g[m]/2+T,L=X(E,D,x),S=h;n.modifiersData[s]=((t={})[S]=L,t.centerOffset=L-D,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&q(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},V={top:"auto",right:"auto",bottom:"auto",left:"auto"};function J(e){var t,n=e.popper,s=e.popperRect,u=e.placement,c=e.offsets,l=e.position,f=e.gpuAcceleration,d=e.adaptive,h=e.roundOffsets,m=!0===h?function(e){var t=e.x,n=e.y,r=window.devicePixelRatio||1;return{x:Q(Q(t*r)/r)||0,y:Q(Q(n*r)/r)||0}}(c):"function"==typeof h?h(c):c,p=m.x,g=void 0===p?0:p,v=m.y,y=void 0===v?0:v,b=c.hasOwnProperty("x"),w=c.hasOwnProperty("y"),_=i,k=r,T=window;if(d){var E=F(n),x="clientHeight",D="clientWidth";E===S(n)&&"static"!==P(E=Y(n)).position&&(x="scrollHeight",D="scrollWidth"),E=E,u===r&&(k=o,y-=E[x]-s.height,y*=f?1:-1),u===i&&(_=a,g-=E[D]-s.width,g*=f?1:-1)}var L,M=Object.assign({position:l},d&&V);return f?Object.assign({},M,((L={})[k]=w?"0":"",L[_]=b?"0":"",L.transform=(T.devicePixelRatio||1)<2?"translate("+g+"px, "+y+"px)":"translate3d("+g+"px, "+y+"px, 0)",L)):Object.assign({},M,((t={})[k]=w?y+"px":"",t[_]=b?g+"px":"",t.transform="",t))}var $={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,o=void 0===r||r,a=n.adaptive,i=void 0===a||a,s=n.roundOffsets,u=void 0===s||s,c={placement:N(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:o};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,J(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:i,roundOffsets:u})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,J(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:u})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},ee={passive:!0};var te={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,o=r.scroll,a=void 0===o||o,i=r.resize,s=void 0===i||i,u=S(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return a&&c.forEach((function(e){e.addEventListener("scroll",n.update,ee)})),s&&u.addEventListener("resize",n.update,ee),function(){a&&c.forEach((function(e){e.removeEventListener("scroll",n.update,ee)})),s&&u.removeEventListener("resize",n.update,ee)}},data:{}},ne={left:"right",right:"left",bottom:"top",top:"bottom"};function re(e){return e.replace(/left|right|bottom|top/g,(function(e){return ne[e]}))}var oe={start:"end",end:"start"};function ae(e){return e.replace(/start|end/g,(function(e){return oe[e]}))}function ie(e){var t=S(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function se(e){return I(Y(e)).left+ie(e).scrollLeft}function ue(e){var t=P(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+o+r)}function ce(e){return["html","body","#document"].indexOf(L(e))>=0?e.ownerDocument.body:C(e)&&ue(e)?e:ce(U(e))}function le(e,t){var n;void 0===t&&(t=[]);var r=ce(e),o=r===(null==(n=e.ownerDocument)?void 0:n.body),a=S(r),i=o?[a].concat(a.visualViewport||[],ue(r)?r:[]):r,s=t.concat(i);return o?s:s.concat(le(U(i)))}function fe(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function de(e,t){return t===d?fe(function(e){var t=S(e),n=Y(e),r=t.visualViewport,o=n.clientWidth,a=n.clientHeight,i=0,s=0;return r&&(o=r.width,a=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(i=r.offsetLeft,s=r.offsetTop)),{width:o,height:a,x:i+se(e),y:s}}(e)):C(t)?function(e){var t=I(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):fe(function(e){var t,n=Y(e),r=ie(e),o=null==(t=e.ownerDocument)?void 0:t.body,a=B(n.scrollWidth,n.clientWidth,o?o.scrollWidth:0,o?o.clientWidth:0),i=B(n.scrollHeight,n.clientHeight,o?o.scrollHeight:0,o?o.clientHeight:0),s=-r.scrollLeft+se(e),u=-r.scrollTop;return"rtl"===P(o||n).direction&&(s+=B(n.clientWidth,o?o.clientWidth:0)-a),{width:a,height:i,x:s,y:u}}(Y(e)))}function he(e,t,n){var r="clippingParents"===t?function(e){var t=le(U(e)),n=["absolute","fixed"].indexOf(P(e).position)>=0&&C(e)?F(e):e;return M(n)?t.filter((function(e){return M(e)&&q(e,n)&&"body"!==L(e)})):[]}(e):[].concat(t),o=[].concat(r,[n]),a=o[0],i=o.reduce((function(t,n){var r=de(e,n);return t.top=B(r.top,t.top),t.right=z(r.right,t.right),t.bottom=z(r.bottom,t.bottom),t.left=B(r.left,t.left),t}),de(e,a));return i.width=i.right-i.left,i.height=i.bottom-i.top,i.x=i.left,i.y=i.top,i}function me(e){return e.split("-")[1]}function pe(e){var t,n=e.reference,s=e.element,u=e.placement,f=u?N(u):null,d=u?me(u):null,h=n.x+n.width/2-s.width/2,m=n.y+n.height/2-s.height/2;switch(f){case r:t={x:h,y:n.y-s.height};break;case o:t={x:h,y:n.y+n.height};break;case a:t={x:n.x+n.width,y:m};break;case i:t={x:n.x-s.width,y:m};break;default:t={x:n.x,y:n.y}}var p=f?W(f):null;if(null!=p){var g="y"===p?"height":"width";switch(d){case c:t[p]=t[p]-(n[g]/2-s[g]/2);break;case l:t[p]=t[p]+(n[g]/2-s[g]/2)}}return t}function ge(e,t){void 0===t&&(t={});var n=t,i=n.placement,s=void 0===i?e.placement:i,c=n.boundary,l=void 0===c?f:c,p=n.rootBoundary,g=void 0===p?d:p,v=n.elementContext,y=void 0===v?h:v,b=n.altBoundary,w=void 0!==b&&b,_=n.padding,k=void 0===_?0:_,T=G("number"!=typeof k?k:Z(k,u)),E=y===h?m:h,x=e.elements.reference,D=e.rects.popper,L=e.elements[w?E:y],S=he(M(L)?L:L.contextElement||Y(e.elements.popper),l,g),C=I(x),O=pe({reference:C,element:D,strategy:"absolute",placement:s}),A=fe(Object.assign({},D,O)),N=y===h?A:C,j={top:S.top-N.top+T.top,bottom:N.bottom-S.bottom+T.bottom,left:S.left-N.left+T.left,right:N.right-S.right+T.right},q=e.modifiersData.offset;if(y===h&&q){var P=q[s];Object.keys(j).forEach((function(e){var t=[a,o].indexOf(e)>=0?1:-1,n=[r,o].indexOf(e)>=0?"y":"x";j[e]+=P[n]*t}))}return j}var ve={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,l=e.name;if(!t.modifiersData[l]._skip){for(var f=n.mainAxis,d=void 0===f||f,h=n.altAxis,m=void 0===h||h,v=n.fallbackPlacements,y=n.padding,b=n.boundary,w=n.rootBoundary,_=n.altBoundary,k=n.flipVariations,T=void 0===k||k,E=n.allowedAutoPlacements,x=t.options.placement,D=N(x),L=v||(D===x||!T?[re(x)]:function(e){if(N(e)===s)return[];var t=re(e);return[ae(e),t,ae(t)]}(x)),S=[x].concat(L).reduce((function(e,n){return e.concat(N(n)===s?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,o=n.boundary,a=n.rootBoundary,i=n.padding,s=n.flipVariations,c=n.allowedAutoPlacements,l=void 0===c?g:c,f=me(r),d=f?s?p:p.filter((function(e){return me(e)===f})):u,h=d.filter((function(e){return l.indexOf(e)>=0}));0===h.length&&(h=d);var m=h.reduce((function(t,n){return t[n]=ge(e,{placement:n,boundary:o,rootBoundary:a,padding:i})[N(n)],t}),{});return Object.keys(m).sort((function(e,t){return m[e]-m[t]}))}(t,{placement:n,boundary:b,rootBoundary:w,padding:y,flipVariations:T,allowedAutoPlacements:E}):n)}),[]),M=t.rects.reference,C=t.rects.popper,O=new Map,A=!0,I=S[0],j=0;j<S.length;j++){var q=S[j],P=N(q),H=me(q)===c,Y=[r,o].indexOf(P)>=0,U=Y?"width":"height",R=ge(t,{placement:q,boundary:b,rootBoundary:w,altBoundary:_,padding:y}),F=Y?H?a:i:H?o:r;M[U]>C[U]&&(F=re(F));var W=re(F),B=[];if(d&&B.push(R[P]<=0),m&&B.push(R[F]<=0,R[W]<=0),B.every((function(e){return e}))){I=q,A=!1;break}O.set(q,B)}if(A)for(var z=function(e){var t=S.find((function(t){var n=O.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return I=t,"break"},Q=T?3:1;Q>0;Q--){if("break"===z(Q))break}t.placement!==I&&(t.modifiersData[l]._skip=!0,t.placement=I,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function ye(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function be(e){return[r,a,o,i].some((function(t){return e[t]>=0}))}var we={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,o=t.rects.popper,a=t.modifiersData.preventOverflow,i=ge(t,{elementContext:"reference"}),s=ge(t,{altBoundary:!0}),u=ye(i,r),c=ye(s,o,a),l=be(u),f=be(c);t.modifiersData[n]={referenceClippingOffsets:u,popperEscapeOffsets:c,isReferenceHidden:l,hasPopperEscaped:f},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":f})}};var _e={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,o=e.name,s=n.offset,u=void 0===s?[0,0]:s,c=g.reduce((function(e,n){return e[n]=function(e,t,n){var o=N(e),s=[i,r].indexOf(o)>=0?-1:1,u="function"==typeof n?n(Object.assign({},t,{placement:e})):n,c=u[0],l=u[1];return c=c||0,l=(l||0)*s,[i,a].indexOf(o)>=0?{x:l,y:c}:{x:c,y:l}}(n,t.rects,u),e}),{}),l=c[t.placement],f=l.x,d=l.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=f,t.modifiersData.popperOffsets.y+=d),t.modifiersData[o]=c}};var ke={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=pe({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}};var Te={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,s=e.name,u=n.mainAxis,l=void 0===u||u,f=n.altAxis,d=void 0!==f&&f,h=n.boundary,m=n.rootBoundary,p=n.altBoundary,g=n.padding,v=n.tether,y=void 0===v||v,b=n.tetherOffset,w=void 0===b?0:b,_=ge(t,{boundary:h,rootBoundary:m,padding:g,altBoundary:p}),k=N(t.placement),T=me(t.placement),E=!T,x=W(k),D="x"===x?"y":"x",L=t.modifiersData.popperOffsets,S=t.rects.reference,M=t.rects.popper,C="function"==typeof w?w(Object.assign({},t.rects,{placement:t.placement})):w,O={x:0,y:0};if(L){if(l||d){var A="y"===x?r:i,I="y"===x?o:a,q="y"===x?"height":"width",P=L[x],H=L[x]+_[A],Y=L[x]-_[I],U=y?-M[q]/2:0,R=T===c?S[q]:M[q],Q=T===c?-M[q]:-S[q],G=t.elements.arrow,Z=y&&G?j(G):{width:0,height:0},K=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},V=K[A],J=K[I],$=X(0,S[q],Z[q]),ee=E?S[q]/2-U-$-V-C:R-$-V-C,te=E?-S[q]/2+U+$+J+C:Q+$+J+C,ne=t.elements.arrow&&F(t.elements.arrow),re=ne?"y"===x?ne.clientTop||0:ne.clientLeft||0:0,oe=t.modifiersData.offset?t.modifiersData.offset[t.placement][x]:0,ae=L[x]+ee-oe-re,ie=L[x]+te-oe;if(l){var se=X(y?z(H,ae):H,P,y?B(Y,ie):Y);L[x]=se,O[x]=se-P}if(d){var ue="x"===x?r:i,ce="x"===x?o:a,le=L[D],fe=le+_[ue],de=le-_[ce],he=X(y?z(fe,ae):fe,le,y?B(de,ie):de);L[D]=he,O[D]=he-le}}t.modifiersData[s]=O}},requiresIfExists:["offset"]};function Ee(e,t,n){void 0===n&&(n=!1);var r,o,a=Y(t),i=I(e),s=C(t),u={scrollLeft:0,scrollTop:0},c={x:0,y:0};return(s||!s&&!n)&&(("body"!==L(t)||ue(a))&&(u=(r=t)!==S(r)&&C(r)?{scrollLeft:(o=r).scrollLeft,scrollTop:o.scrollTop}:ie(r)),C(t)?((c=I(t)).x+=t.clientLeft,c.y+=t.clientTop):a&&(c.x=se(a))),{x:i.left+u.scrollLeft-c.x,y:i.top+u.scrollTop-c.y,width:i.width,height:i.height}}function xe(e){var t=new Map,n=new Set,r=[];function o(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&o(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||o(e)})),r}var De={placement:"bottom",modifiers:[],strategy:"absolute"};function Le(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Se(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,o=t.defaultOptions,a=void 0===o?De:o;return function(e,t,n){void 0===n&&(n=a);var o,i,s={placement:"bottom",orderedModifiers:[],options:Object.assign({},De,a),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},u=[],c=!1,l={state:s,setOptions:function(n){f(),s.options=Object.assign({},a,s.options,n),s.scrollParents={reference:M(e)?le(e):e.contextElement?le(e.contextElement):[],popper:le(t)};var o=function(e){var t=xe(e);return D.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}(function(e){var t=e.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}([].concat(r,s.options.modifiers)));return s.orderedModifiers=o.filter((function(e){return e.enabled})),s.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,o=e.effect;if("function"==typeof o){var a=o({state:s,name:t,instance:l,options:r}),i=function(){};u.push(a||i)}})),l.update()},forceUpdate:function(){if(!c){var e=s.elements,t=e.reference,n=e.popper;if(Le(t,n)){s.rects={reference:Ee(t,F(n),"fixed"===s.options.strategy),popper:j(n)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(e){return s.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<s.orderedModifiers.length;r++)if(!0!==s.reset){var o=s.orderedModifiers[r],a=o.fn,i=o.options,u=void 0===i?{}:i,f=o.name;"function"==typeof a&&(s=a({state:s,options:u,name:f,instance:l})||s)}else s.reset=!1,r=-1}}},update:(o=function(){return new Promise((function(e){l.forceUpdate(),e(s)}))},function(){return i||(i=new Promise((function(e){Promise.resolve().then((function(){i=void 0,e(o())}))}))),i}),destroy:function(){f(),c=!0}};if(!Le(e,t))return l;function f(){u.forEach((function(e){return e()})),u=[]}return l.setOptions(n).then((function(e){!c&&n.onFirstUpdate&&n.onFirstUpdate(e)})),l}}var Me=Se(),Ce=Se({defaultModifiers:[te,ke,$,A,_e,ve,Te,K,we]}),Oe=Se({defaultModifiers:[te,ke,$,A]})},905:function(e,t,n){"use strict";function r(e){return(r=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function o(e,t,n){return(o="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var o=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=r(e)););return e}(e,t);if(o){var a=Object.getOwnPropertyDescriptor(o,t);return a.get?a.get.call(n):a.value}})(e,t,n||e)}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){return(i=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&i(e,t)}function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function d(e,t,n){return t&&f(e.prototype,t),n&&f(e,n),e}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function m(e,t){if(e){if("string"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}function p(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,a=[],i=!0,s=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){s=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(s)throw o}}return a}}(e,t)||m(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function g(e){return function(e){if(Array.isArray(e))return h(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||m(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function v(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function y(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?v(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):v(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function b(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=r(e);if(t){var a=r(this).constructor;n=Reflect.construct(o,arguments,a)}else n=o.apply(this,arguments);return c(this,n)}}var w,_;n.r(t),e=n.hmd(e),w=void 0,_=function(e){var t=function(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}(e),n=function(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document.documentElement;return(t=[]).concat.apply(t,g(Element.prototype.querySelectorAll.call(n,e)))},a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:document.documentElement;return Element.prototype.querySelector.call(t,e)},i=function(e,t){var n;return(n=[]).concat.apply(n,g(e.children)).filter((function(e){return e.matches(t)}))},c=function(e,t){for(var n=[],r=e.parentNode;r&&r.nodeType===Node.ELEMENT_NODE&&3!==r.nodeType;)r.matches(t)&&n.push(r),r=r.parentNode;return n},f=function(e,t){for(var n=e.previousElementSibling;n;){if(n.matches(t))return[n];n=n.previousElementSibling}return[]},h=function(e,t){for(var n=e.nextElementSibling;n;){if(n.matches(t))return[n];n=n.nextElementSibling}return[]},m=function(e){do{e+=Math.floor(1e6*Math.random())}while(document.getElementById(e));return e},v=function(e){var t=e.getAttribute("data-bs-target");if(!t||"#"===t){var n=e.getAttribute("href");if(!n||!n.includes("#")&&!n.startsWith("."))return null;n.includes("#")&&!n.startsWith("#")&&(n="#"+n.split("#")[1]),t=n&&"#"!==n?n.trim():null}return t},w=function(e){var t=v(e);return t&&document.querySelector(t)?t:null},_=function(e){var t=v(e);return t?document.querySelector(t):null},k=function(e){if(!e)return 0;var t=window.getComputedStyle(e),n=t.transitionDuration,r=t.transitionDelay,o=Number.parseFloat(n),a=Number.parseFloat(r);return o||a?(n=n.split(",")[0],r=r.split(",")[0],1e3*(Number.parseFloat(n)+Number.parseFloat(r))):0},T=function(e){e.dispatchEvent(new Event("transitionend"))},E=function(e){return!(!e||"object"!=u(e))&&(void 0!==e.jquery&&(e=e[0]),void 0!==e.nodeType)},x=function(e){return E(e)?e.jquery?e[0]:e:"string"==typeof e&&e.length>0?a(e):null},D=function(e,t){var n=!1,r=t+5;e.addEventListener("transitionend",(function t(){n=!0,e.removeEventListener("transitionend",t)})),setTimeout((function(){n||T(e)}),r)},L=function(e,t,n){Object.keys(n).forEach((function(r){var o,a=n[r],i=t[r],s=i&&E(i)?"element":null==(o=i)?""+o:{}.toString.call(o).match(/\s([a-z]+)/i)[1].toLowerCase();if(!new RegExp(a).test(s))throw new TypeError("".concat(e.toUpperCase(),': Option "').concat(r,'" provided type "').concat(s,'" but expected type "').concat(a,'".'))}))},S=function(e){if(!e)return!1;if(e.style&&e.parentNode&&e.parentNode.style){var t=getComputedStyle(e),n=getComputedStyle(e.parentNode);return"none"!==t.display&&"none"!==n.display&&"hidden"!==t.visibility}return!1},M=function(e){return!e||e.nodeType!==Node.ELEMENT_NODE||!!e.classList.contains("disabled")||(void 0!==e.disabled?e.disabled:e.hasAttribute("disabled")&&"false"!==e.getAttribute("disabled"))},C=function e(t){if(!document.documentElement.attachShadow)return null;if("function"==typeof t.getRootNode){var n=t.getRootNode();return n instanceof ShadowRoot?n:null}return t instanceof ShadowRoot?t:t.parentNode?e(t.parentNode):null},O=function(){},A=function(e){return e.offsetHeight},N=function(){var e=window.jQuery;return e&&!document.body.hasAttribute("data-bs-no-jquery")?e:null},I=function(){return"rtl"===document.documentElement.dir},j=function(e){var t;t=function(){var t=N();if(t){var n=e.NAME,r=t.fn[n];t.fn[n]=e.jQueryInterface,t.fn[n].Constructor=e,t.fn[n].noConflict=function(){return t.fn[n]=r,e.jQueryInterface}}},"loading"===document.readyState?document.addEventListener("DOMContentLoaded",t):t()},q=function(e){"function"==typeof e&&e()},P=new Map,H=function(e,t,n){P.has(e)||P.set(e,new Map);var r=P.get(e);r.has(t)||0===r.size?r.set(t,n):console.error("Bootstrap doesn't allow more than one instance per element. Bound instance: ".concat(Array.from(r.keys())[0],"."))},Y=function(e,t){return P.has(e)&&P.get(e).get(t)||null},U=function(e,t){if(P.has(e)){var n=P.get(e);n.delete(t),0===n.size&&P.delete(e)}},R=/[^.]*(?=\..*)\.|.*/,F=/\..*/,W=/::\d+$/,B={},z=1,Q={mouseenter:"mouseover",mouseleave:"mouseout"},X=/^(mouseenter|mouseleave)/i,G=new Set(["click","dblclick","mouseup","mousedown","contextmenu","mousewheel","DOMMouseScroll","mouseover","mouseout","mousemove","selectstart","selectend","keydown","keypress","keyup","orientationchange","touchstart","touchmove","touchend","touchcancel","pointerdown","pointermove","pointerup","pointerleave","pointercancel","gesturestart","gesturechange","gestureend","focus","blur","change","reset","select","submit","focusin","focusout","load","unload","beforeunload","resize","move","DOMContentLoaded","readystatechange","error","abort","scroll"]);function Z(e,t){return t&&"".concat(t,"::").concat(z++)||e.uidEvent||z++}function K(e){var t=Z(e);return e.uidEvent=t,B[t]=B[t]||{},B[t]}function V(e,t){for(var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=Object.keys(e),o=0,a=r.length;o<a;o++){var i=e[r[o]];if(i.originalHandler===t&&i.delegationSelector===n)return i}return null}function J(e,t,n){var r="string"==typeof t,o=r?n:t,a=te(e);return G.has(a)||(a=e),[r,o,a]}function $(e,t,n,r,o){if("string"==typeof t&&e){if(n||(n=r,r=null),X.test(t)){var a=function(e){return function(t){if(!t.relatedTarget||t.relatedTarget!==t.delegateTarget&&!t.delegateTarget.contains(t.relatedTarget))return e.call(this,t)}};r?r=a(r):n=a(n)}var i=p(J(t,n,r),3),s=i[0],u=i[1],c=i[2],l=K(e),f=l[c]||(l[c]={}),d=V(f,u,s?n:null);if(d)d.oneOff=d.oneOff&&o;else{var h=Z(u,t.replace(R,"")),m=s?function(e,t,n){return function r(o){for(var a=e.querySelectorAll(t),i=o.target;i&&i!==this;i=i.parentNode)for(var s=a.length;s--;)if(a[s]===i)return o.delegateTarget=i,r.oneOff&&ne.off(e,o.type,t,n),n.apply(i,[o]);return null}}(e,n,r):function(e,t){return function n(r){return r.delegateTarget=e,n.oneOff&&ne.off(e,r.type,t),t.apply(e,[r])}}(e,n);m.delegationSelector=s?n:null,m.originalHandler=u,m.oneOff=o,m.uidEvent=h,f[h]=m,e.addEventListener(c,m,s)}}}function ee(e,t,n,r,o){var a=V(t[n],r,o);a&&(e.removeEventListener(n,a,Boolean(o)),delete t[n][a.uidEvent])}function te(e){return e=e.replace(F,""),Q[e]||e}var ne={on:function(e,t,n,r){$(e,t,n,r,!1)},one:function(e,t,n,r){$(e,t,n,r,!0)},off:function(e,t,n,r){if("string"==typeof t&&e){var o=p(J(t,n,r),3),a=o[0],i=o[1],s=o[2],u=s!==t,c=K(e),l=t.startsWith(".");if(void 0===i){l&&Object.keys(c).forEach((function(n){!function(e,t,n,r){var o=t[n]||{};Object.keys(o).forEach((function(a){if(a.includes(r)){var i=o[a];ee(e,t,n,i.originalHandler,i.delegationSelector)}}))}(e,c,n,t.slice(1))}));var f=c[s]||{};Object.keys(f).forEach((function(n){var r=n.replace(W,"");if(!u||t.includes(r)){var o=f[n];ee(e,c,s,o.originalHandler,o.delegationSelector)}}))}else{if(!c||!c[s])return;ee(e,c,s,i,a?n:null)}}},trigger:function(e,t,n){if("string"!=typeof t||!e)return null;var r,o=N(),a=te(t),i=t!==a,s=G.has(a),u=!0,c=!0,l=!1,f=null;return i&&o&&(r=o.Event(t,n),o(e).trigger(r),u=!r.isPropagationStopped(),c=!r.isImmediatePropagationStopped(),l=r.isDefaultPrevented()),s?(f=document.createEvent("HTMLEvents")).initEvent(a,u,!0):f=new CustomEvent(t,{bubbles:u,cancelable:!0}),void 0!==n&&Object.keys(n).forEach((function(e){Object.defineProperty(f,e,{get:function(){return n[e]}})})),l&&f.preventDefault(),c&&e.dispatchEvent(f),f.defaultPrevented&&void 0!==r&&r.preventDefault(),f}},re=function(){function e(t){l(this,e),(t=x(t))&&(this._element=t,H(this._element,this.constructor.DATA_KEY,this))}return d(e,[{key:"dispose",value:function(){var e=this;U(this._element,this.constructor.DATA_KEY),ne.off(this._element,this.constructor.EVENT_KEY),Object.getOwnPropertyNames(this).forEach((function(t){e[t]=null}))}},{key:"_queueCallback",value:function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];if(n){var r=k(t);ne.one(t,"transitionend",(function(){return q(e)})),D(t,r)}else q(e)}}],[{key:"getInstance",value:function(e){return Y(e,this.DATA_KEY)}},{key:"VERSION",get:function(){return"5.0.1"}},{key:"NAME",get:function(){throw new Error('You have to implement the static method "NAME", for each component!')}},{key:"DATA_KEY",get:function(){return"bs."+this.NAME}},{key:"EVENT_KEY",get:function(){return"."+this.DATA_KEY}}]),e}(),oe=function(e){s(n,e);var t=b(n);function n(){return l(this,n),t.apply(this,arguments)}return d(n,[{key:"close",value:function(e){var t=e?this._getRootElement(e):this._element,n=this._triggerCloseEvent(t);null===n||n.defaultPrevented||this._removeElement(t)}},{key:"_getRootElement",value:function(e){return _(e)||e.closest(".alert")}},{key:"_triggerCloseEvent",value:function(e){return ne.trigger(e,"close.bs.alert")}},{key:"_removeElement",value:function(e){var t=this;e.classList.remove("show");var n=e.classList.contains("fade");this._queueCallback((function(){return t._destroyElement(e)}),e,n)}},{key:"_destroyElement",value:function(e){e.parentNode&&e.parentNode.removeChild(e),ne.trigger(e,"closed.bs.alert")}}],[{key:"NAME",get:function(){return"alert"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=Y(this,"bs.alert");t||(t=new n(this)),"close"===e&&t[e](this)}))}},{key:"handleDismiss",value:function(e){return function(t){t&&t.preventDefault(),e.close(this)}}}]),n}(re);ne.on(document,"click.bs.alert.data-api",'[data-bs-dismiss="alert"]',oe.handleDismiss(new oe)),j(oe);var ae=function(e){s(n,e);var t=b(n);function n(){return l(this,n),t.apply(this,arguments)}return d(n,[{key:"toggle",value:function(){this._element.setAttribute("aria-pressed",this._element.classList.toggle("active"))}}],[{key:"NAME",get:function(){return"button"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=Y(this,"bs.button");t||(t=new n(this)),"toggle"===e&&t[e]()}))}}]),n}(re);function ie(e){return"true"===e||"false"!==e&&(e===Number(e).toString()?Number(e):""===e||"null"===e?null:e)}function se(e){return e.replace(/[A-Z]/g,(function(e){return"-"+e.toLowerCase()}))}ne.on(document,"click.bs.button.data-api",'[data-bs-toggle="button"]',(function(e){e.preventDefault();var t=e.target.closest('[data-bs-toggle="button"]'),n=Y(t,"bs.button");n||(n=new ae(t)),n.toggle()})),j(ae);var ue={setDataAttribute:function(e,t,n){e.setAttribute("data-bs-"+se(t),n)},removeDataAttribute:function(e,t){e.removeAttribute("data-bs-"+se(t))},getDataAttributes:function(e){if(!e)return{};var t={};return Object.keys(e.dataset).filter((function(e){return e.startsWith("bs")})).forEach((function(n){var r=n.replace(/^bs/,"");r=r.charAt(0).toLowerCase()+r.slice(1,r.length),t[r]=ie(e.dataset[n])})),t},getDataAttribute:function(e,t){return ie(e.getAttribute("data-bs-"+se(t)))},offset:function(e){var t=e.getBoundingClientRect();return{top:t.top+document.body.scrollTop,left:t.left+document.body.scrollLeft}},position:function(e){return{top:e.offsetTop,left:e.offsetLeft}}},ce={interval:5e3,keyboard:!0,slide:!1,pause:"hover",wrap:!0,touch:!0},le={interval:"(number|boolean)",keyboard:"boolean",slide:"(boolean|string)",pause:"(string|boolean)",wrap:"boolean",touch:"boolean"},fe="next",de="prev",he="left",me="right",pe=function(e){s(r,e);var t=b(r);function r(e,n){var o;return l(this,r),(o=t.call(this,e))._items=null,o._interval=null,o._activeElement=null,o._isPaused=!1,o._isSliding=!1,o.touchTimeout=null,o.touchStartX=0,o.touchDeltaX=0,o._config=o._getConfig(n),o._indicatorsElement=a(".carousel-indicators",o._element),o._touchSupported="ontouchstart"in document.documentElement||navigator.maxTouchPoints>0,o._pointerEvent=Boolean(window.PointerEvent),o._addEventListeners(),o}return d(r,[{key:"next",value:function(){this._isSliding||this._slide(fe)}},{key:"nextWhenVisible",value:function(){!document.hidden&&S(this._element)&&this.next()}},{key:"prev",value:function(){this._isSliding||this._slide(de)}},{key:"pause",value:function(e){e||(this._isPaused=!0),a(".carousel-item-next, .carousel-item-prev",this._element)&&(T(this._element),this.cycle(!0)),clearInterval(this._interval),this._interval=null}},{key:"cycle",value:function(e){e||(this._isPaused=!1),this._interval&&(clearInterval(this._interval),this._interval=null),this._config&&this._config.interval&&!this._isPaused&&(this._updateInterval(),this._interval=setInterval((document.visibilityState?this.nextWhenVisible:this.next).bind(this),this._config.interval))}},{key:"to",value:function(e){var t=this;this._activeElement=a(".active.carousel-item",this._element);var n=this._getItemIndex(this._activeElement);if(!(e>this._items.length-1||e<0))if(this._isSliding)ne.one(this._element,"slid.bs.carousel",(function(){return t.to(e)}));else{if(n===e)return this.pause(),void this.cycle();var r=e>n?fe:de;this._slide(r,this._items[e])}}},{key:"_getConfig",value:function(e){return e=y(y({},ce),e),L("carousel",e,le),e}},{key:"_handleSwipe",value:function(){var e=Math.abs(this.touchDeltaX);if(!(e<=40)){var t=e/this.touchDeltaX;this.touchDeltaX=0,t&&this._slide(t>0?me:he)}}},{key:"_addEventListeners",value:function(){var e=this;this._config.keyboard&&ne.on(this._element,"keydown.bs.carousel",(function(t){return e._keydown(t)})),"hover"===this._config.pause&&(ne.on(this._element,"mouseenter.bs.carousel",(function(t){return e.pause(t)})),ne.on(this._element,"mouseleave.bs.carousel",(function(t){return e.cycle(t)}))),this._config.touch&&this._touchSupported&&this._addTouchEventListeners()}},{key:"_addTouchEventListeners",value:function(){var e=this,t=function(t){!e._pointerEvent||"pen"!==t.pointerType&&"touch"!==t.pointerType?e._pointerEvent||(e.touchStartX=t.touches[0].clientX):e.touchStartX=t.clientX},r=function(t){!e._pointerEvent||"pen"!==t.pointerType&&"touch"!==t.pointerType||(e.touchDeltaX=t.clientX-e.touchStartX),e._handleSwipe(),"hover"===e._config.pause&&(e.pause(),e.touchTimeout&&clearTimeout(e.touchTimeout),e.touchTimeout=setTimeout((function(t){return e.cycle(t)}),500+e._config.interval))};n(".carousel-item img",this._element).forEach((function(e){ne.on(e,"dragstart.bs.carousel",(function(e){return e.preventDefault()}))})),this._pointerEvent?(ne.on(this._element,"pointerdown.bs.carousel",(function(e){return t(e)})),ne.on(this._element,"pointerup.bs.carousel",(function(e){return r(e)})),this._element.classList.add("pointer-event")):(ne.on(this._element,"touchstart.bs.carousel",(function(e){return t(e)})),ne.on(this._element,"touchmove.bs.carousel",(function(t){return function(t){e.touchDeltaX=t.touches&&t.touches.length>1?0:t.touches[0].clientX-e.touchStartX}(t)})),ne.on(this._element,"touchend.bs.carousel",(function(e){return r(e)})))}},{key:"_keydown",value:function(e){/input|textarea/i.test(e.target.tagName)||("ArrowLeft"===e.key?(e.preventDefault(),this._slide(me)):"ArrowRight"===e.key&&(e.preventDefault(),this._slide(he)))}},{key:"_getItemIndex",value:function(e){return this._items=e&&e.parentNode?n(".carousel-item",e.parentNode):[],this._items.indexOf(e)}},{key:"_getItemByOrder",value:function(e,t){var n=e===fe,r=e===de,o=this._getItemIndex(t),a=this._items.length-1;if((r&&0===o||n&&o===a)&&!this._config.wrap)return t;var i=(o+(r?-1:1))%this._items.length;return-1===i?this._items[this._items.length-1]:this._items[i]}},{key:"_triggerSlideEvent",value:function(e,t){var n=this._getItemIndex(e),r=this._getItemIndex(a(".active.carousel-item",this._element));return ne.trigger(this._element,"slide.bs.carousel",{relatedTarget:e,direction:t,from:r,to:n})}},{key:"_setActiveIndicatorElement",value:function(e){if(this._indicatorsElement){var t=a(".active",this._indicatorsElement);t.classList.remove("active"),t.removeAttribute("aria-current");for(var r=n("[data-bs-target]",this._indicatorsElement),o=0;o<r.length;o++)if(Number.parseInt(r[o].getAttribute("data-bs-slide-to"),10)===this._getItemIndex(e)){r[o].classList.add("active"),r[o].setAttribute("aria-current","true");break}}}},{key:"_updateInterval",value:function(){var e=this._activeElement||a(".active.carousel-item",this._element);if(e){var t=Number.parseInt(e.getAttribute("data-bs-interval"),10);t?(this._config.defaultInterval=this._config.defaultInterval||this._config.interval,this._config.interval=t):this._config.interval=this._config.defaultInterval||this._config.interval}}},{key:"_slide",value:function(e,t){var n=this,r=this._directionToOrder(e),o=a(".active.carousel-item",this._element),i=this._getItemIndex(o),s=t||this._getItemByOrder(r,o),u=this._getItemIndex(s),c=Boolean(this._interval),l=r===fe,f=l?"carousel-item-start":"carousel-item-end",d=l?"carousel-item-next":"carousel-item-prev",h=this._orderToDirection(r);if(s&&s.classList.contains("active"))this._isSliding=!1;else if(!this._triggerSlideEvent(s,h).defaultPrevented&&o&&s){this._isSliding=!0,c&&this.pause(),this._setActiveIndicatorElement(s),this._activeElement=s;var m=function(){ne.trigger(n._element,"slid.bs.carousel",{relatedTarget:s,direction:h,from:i,to:u})};this._element.classList.contains("slide")?(s.classList.add(d),A(s),o.classList.add(f),s.classList.add(f),this._queueCallback((function(){s.classList.remove(f,d),s.classList.add("active"),o.classList.remove("active",d,f),n._isSliding=!1,setTimeout(m,0)}),o,!0)):(o.classList.remove("active"),s.classList.add("active"),this._isSliding=!1,m()),c&&this.cycle()}}},{key:"_directionToOrder",value:function(e){return[me,he].includes(e)?I()?e===he?de:fe:e===he?fe:de:e}},{key:"_orderToDirection",value:function(e){return[fe,de].includes(e)?I()?e===de?he:me:e===de?me:he:e}}],[{key:"Default",get:function(){return ce}},{key:"NAME",get:function(){return"carousel"}},{key:"carouselInterface",value:function(e,t){var n=Y(e,"bs.carousel"),o=y(y({},ce),ue.getDataAttributes(e));"object"==u(t)&&(o=y(y({},o),t));var a="string"==typeof t?t:o.slide;if(n||(n=new r(e,o)),"number"==typeof t)n.to(t);else if("string"==typeof a){if(void 0===n[a])throw new TypeError('No method named "'.concat(a,'"'));n[a]()}else o.interval&&o.ride&&(n.pause(),n.cycle())}},{key:"jQueryInterface",value:function(e){return this.each((function(){r.carouselInterface(this,e)}))}},{key:"dataApiClickHandler",value:function(e){var t=_(this);if(t&&t.classList.contains("carousel")){var n=y(y({},ue.getDataAttributes(t)),ue.getDataAttributes(this)),o=this.getAttribute("data-bs-slide-to");o&&(n.interval=!1),r.carouselInterface(t,n),o&&Y(t,"bs.carousel").to(o),e.preventDefault()}}}]),r}(re);ne.on(document,"click.bs.carousel.data-api","[data-bs-slide], [data-bs-slide-to]",pe.dataApiClickHandler),ne.on(window,"load.bs.carousel.data-api",(function(){for(var e=n('[data-bs-ride="carousel"]'),t=0,r=e.length;t<r;t++)pe.carouselInterface(e[t],Y(e[t],"bs.carousel"))})),j(pe);var ge={toggle:!0,parent:""},ve={toggle:"boolean",parent:"(string|element)"},ye=function(e){s(r,e);var t=b(r);function r(e,o){var a;l(this,r),(a=t.call(this,e))._isTransitioning=!1,a._config=a._getConfig(o),a._triggerArray=n('[data-bs-toggle="collapse"][href="#'.concat(a._element.id,'"],[data-bs-toggle="collapse"][data-bs-target="#').concat(a._element.id,'"]'));for(var i=n('[data-bs-toggle="collapse"]'),s=0,u=i.length;s<u;s++){var c=i[s],f=w(c),d=n(f).filter((function(e){return e===a._element}));null!==f&&d.length&&(a._selector=f,a._triggerArray.push(c))}return a._parent=a._config.parent?a._getParent():null,a._config.parent||a._addAriaAndCollapsedClass(a._element,a._triggerArray),a._config.toggle&&a.toggle(),a}return d(r,[{key:"toggle",value:function(){this._element.classList.contains("show")?this.hide():this.show()}},{key:"show",value:function(){var e=this;if(!this._isTransitioning&&!this._element.classList.contains("show")){var t,o;this._parent&&0===(t=n(".show, .collapsing",this._parent).filter((function(t){return"string"==typeof e._config.parent?t.getAttribute("data-bs-parent")===e._config.parent:t.classList.contains("collapse")}))).length&&(t=null);var i=a(this._selector);if(t){var s=t.find((function(e){return i!==e}));if((o=s?Y(s,"bs.collapse"):null)&&o._isTransitioning)return}if(!ne.trigger(this._element,"show.bs.collapse").defaultPrevented){t&&t.forEach((function(e){i!==e&&r.collapseInterface(e,"hide"),o||H(e,"bs.collapse",null)}));var u=this._getDimension();this._element.classList.remove("collapse"),this._element.classList.add("collapsing"),this._element.style[u]=0,this._triggerArray.length&&this._triggerArray.forEach((function(e){e.classList.remove("collapsed"),e.setAttribute("aria-expanded",!0)})),this.setTransitioning(!0);var c="scroll"+(u[0].toUpperCase()+u.slice(1));this._queueCallback((function(){e._element.classList.remove("collapsing"),e._element.classList.add("collapse","show"),e._element.style[u]="",e.setTransitioning(!1),ne.trigger(e._element,"shown.bs.collapse")}),this._element,!0),this._element.style[u]=this._element[c]+"px"}}}},{key:"hide",value:function(){var e=this;if(!this._isTransitioning&&this._element.classList.contains("show")&&!ne.trigger(this._element,"hide.bs.collapse").defaultPrevented){var t=this._getDimension();this._element.style[t]=this._element.getBoundingClientRect()[t]+"px",A(this._element),this._element.classList.add("collapsing"),this._element.classList.remove("collapse","show");var n=this._triggerArray.length;if(n>0)for(var r=0;r<n;r++){var o=this._triggerArray[r],a=_(o);a&&!a.classList.contains("show")&&(o.classList.add("collapsed"),o.setAttribute("aria-expanded",!1))}this.setTransitioning(!0),this._element.style[t]="",this._queueCallback((function(){e.setTransitioning(!1),e._element.classList.remove("collapsing"),e._element.classList.add("collapse"),ne.trigger(e._element,"hidden.bs.collapse")}),this._element,!0)}}},{key:"setTransitioning",value:function(e){this._isTransitioning=e}},{key:"_getConfig",value:function(e){return(e=y(y({},ge),e)).toggle=Boolean(e.toggle),L("collapse",e,ve),e}},{key:"_getDimension",value:function(){return this._element.classList.contains("width")?"width":"height"}},{key:"_getParent",value:function(){var e=this,t=this._config.parent;t=x(t);var r='[data-bs-toggle="collapse"][data-bs-parent="'.concat(t,'"]');return n(r,t).forEach((function(t){var n=_(t);e._addAriaAndCollapsedClass(n,[t])})),t}},{key:"_addAriaAndCollapsedClass",value:function(e,t){if(e&&t.length){var n=e.classList.contains("show");t.forEach((function(e){n?e.classList.remove("collapsed"):e.classList.add("collapsed"),e.setAttribute("aria-expanded",n)}))}}}],[{key:"Default",get:function(){return ge}},{key:"NAME",get:function(){return"collapse"}},{key:"collapseInterface",value:function(e,t){var n=Y(e,"bs.collapse"),o=y(y(y({},ge),ue.getDataAttributes(e)),"object"==u(t)&&t?t:{});if(!n&&o.toggle&&"string"==typeof t&&/show|hide/.test(t)&&(o.toggle=!1),n||(n=new r(e,o)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'.concat(t,'"'));n[t]()}}},{key:"jQueryInterface",value:function(e){return this.each((function(){r.collapseInterface(this,e)}))}}]),r}(re);ne.on(document,"click.bs.collapse.data-api",'[data-bs-toggle="collapse"]',(function(e){("A"===e.target.tagName||e.delegateTarget&&"A"===e.delegateTarget.tagName)&&e.preventDefault();var t=ue.getDataAttributes(this),r=w(this);n(r).forEach((function(e){var n,r=Y(e,"bs.collapse");r?(null===r._parent&&"string"==typeof t.parent&&(r._config.parent=t.parent,r._parent=r._getParent()),n="toggle"):n=t,ye.collapseInterface(e,n)}))})),j(ye);var be=new RegExp("ArrowUp|ArrowDown|Escape"),we=I()?"top-end":"top-start",_e=I()?"top-start":"top-end",ke=I()?"bottom-end":"bottom-start",Te=I()?"bottom-start":"bottom-end",Ee=I()?"left-start":"right-start",xe=I()?"right-start":"left-start",De={offset:[0,2],boundary:"clippingParents",reference:"toggle",display:"dynamic",popperConfig:null,autoClose:!0},Le={offset:"(array|string|function)",boundary:"(string|element)",reference:"(string|element|object)",display:"string",popperConfig:"(null|object|function)",autoClose:"(boolean|string)"},Se=function(e){s(i,e);var a=b(i);function i(e,t){var n;return l(this,i),(n=a.call(this,e))._popper=null,n._config=n._getConfig(t),n._menu=n._getMenuElement(),n._inNavbar=n._detectNavbar(),n._addEventListeners(),n}return d(i,[{key:"toggle",value:function(){M(this._element)||(this._element.classList.contains("show")?this.hide():this.show())}},{key:"show",value:function(){if(!M(this._element)&&!this._menu.classList.contains("show")){var e=i.getParentFromElement(this._element),n={relatedTarget:this._element};if(!ne.trigger(this._element,"show.bs.dropdown",n).defaultPrevented){var r;if(this._inNavbar)ue.setDataAttribute(this._menu,"popper","none");else{if(void 0===t)throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");var o=this._element;"parent"===this._config.reference?o=e:E(this._config.reference)?o=x(this._config.reference):"object"==u(this._config.reference)&&(o=this._config.reference);var a=this._getPopperConfig(),s=a.modifiers.find((function(e){return"applyStyles"===e.name&&!1===e.enabled}));this._popper=t.createPopper(o,this._menu,a),s&&ue.setDataAttribute(this._menu,"popper","static")}"ontouchstart"in document.documentElement&&!e.closest(".navbar-nav")&&(r=[]).concat.apply(r,g(document.body.children)).forEach((function(e){return ne.on(e,"mouseover",O)})),this._element.focus(),this._element.setAttribute("aria-expanded",!0),this._menu.classList.toggle("show"),this._element.classList.toggle("show"),ne.trigger(this._element,"shown.bs.dropdown",n)}}}},{key:"hide",value:function(){if(!M(this._element)&&this._menu.classList.contains("show")){var e={relatedTarget:this._element};this._completeHide(e)}}},{key:"dispose",value:function(){this._popper&&this._popper.destroy(),o(r(i.prototype),"dispose",this).call(this)}},{key:"update",value:function(){this._inNavbar=this._detectNavbar(),this._popper&&this._popper.update()}},{key:"_addEventListeners",value:function(){var e=this;ne.on(this._element,"click.bs.dropdown",(function(t){t.preventDefault(),e.toggle()}))}},{key:"_completeHide",value:function(e){var t;ne.trigger(this._element,"hide.bs.dropdown",e).defaultPrevented||("ontouchstart"in document.documentElement&&(t=[]).concat.apply(t,g(document.body.children)).forEach((function(e){return ne.off(e,"mouseover",O)})),this._popper&&this._popper.destroy(),this._menu.classList.remove("show"),this._element.classList.remove("show"),this._element.setAttribute("aria-expanded","false"),ue.removeDataAttribute(this._menu,"popper"),ne.trigger(this._element,"hidden.bs.dropdown",e))}},{key:"_getConfig",value:function(e){if(e=y(y(y({},this.constructor.Default),ue.getDataAttributes(this._element)),e),L("dropdown",e,this.constructor.DefaultType),"object"==u(e.reference)&&!E(e.reference)&&"function"!=typeof e.reference.getBoundingClientRect)throw new TypeError("dropdown".toUpperCase()+': Option "reference" provided type "object" without a required "getBoundingClientRect" method.');return e}},{key:"_getMenuElement",value:function(){return h(this._element,".dropdown-menu")[0]}},{key:"_getPlacement",value:function(){var e=this._element.parentNode;if(e.classList.contains("dropend"))return Ee;if(e.classList.contains("dropstart"))return xe;var t="end"===getComputedStyle(this._menu).getPropertyValue("--bs-position").trim();return e.classList.contains("dropup")?t?_e:we:t?Te:ke}},{key:"_detectNavbar",value:function(){return null!==this._element.closest(".navbar")}},{key:"_getOffset",value:function(){var e=this,t=this._config.offset;return"string"==typeof t?t.split(",").map((function(e){return Number.parseInt(e,10)})):"function"==typeof t?function(n){return t(n,e._element)}:t}},{key:"_getPopperConfig",value:function(){var e={placement:this._getPlacement(),modifiers:[{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"offset",options:{offset:this._getOffset()}}]};return"static"===this._config.display&&(e.modifiers=[{name:"applyStyles",enabled:!1}]),y(y({},e),"function"==typeof this._config.popperConfig?this._config.popperConfig(e):this._config.popperConfig)}},{key:"_selectMenuItem",value:function(e){var t=n(".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",this._menu).filter(S);if(t.length){var r=t.indexOf(e.target);"ArrowUp"===e.key&&r>0&&r--,"ArrowDown"===e.key&&r<t.length-1&&r++,t[r=-1===r?0:r].focus()}}}],[{key:"Default",get:function(){return De}},{key:"DefaultType",get:function(){return Le}},{key:"NAME",get:function(){return"dropdown"}},{key:"dropdownInterface",value:function(e,t){var n=Y(e,"bs.dropdown");if(n||(n=new i(e,"object"==u(t)?t:null)),"string"==typeof t){if(void 0===n[t])throw new TypeError('No method named "'.concat(t,'"'));n[t]()}}},{key:"jQueryInterface",value:function(e){return this.each((function(){i.dropdownInterface(this,e)}))}},{key:"clearMenus",value:function(e){if(!e||2!==e.button&&("keyup"!==e.type||"Tab"===e.key))for(var t=n('[data-bs-toggle="dropdown"]'),r=0,o=t.length;r<o;r++){var a=Y(t[r],"bs.dropdown");if(a&&!1!==a._config.autoClose&&a._element.classList.contains("show")){var i={relatedTarget:a._element};if(e){var s=e.composedPath(),u=s.includes(a._menu);if(s.includes(a._element)||"inside"===a._config.autoClose&&!u||"outside"===a._config.autoClose&&u)continue;if(a._menu.contains(e.target)&&("keyup"===e.type&&"Tab"===e.key||/input|select|option|textarea|form/i.test(e.target.tagName)))continue;"click"===e.type&&(i.clickEvent=e)}a._completeHide(i)}}}},{key:"getParentFromElement",value:function(e){return _(e)||e.parentNode}},{key:"dataApiKeydownHandler",value:function(e){var t=this;if(!(/input|textarea/i.test(e.target.tagName)?"Space"===e.key||"Escape"!==e.key&&("ArrowDown"!==e.key&&"ArrowUp"!==e.key||e.target.closest(".dropdown-menu")):!be.test(e.key))){var n=this.classList.contains("show");if((n||"Escape"!==e.key)&&(e.preventDefault(),e.stopPropagation(),!M(this))){var r=function(){return t.matches('[data-bs-toggle="dropdown"]')?t:f(t,'[data-bs-toggle="dropdown"]')[0]};if("Escape"===e.key)return r().focus(),void i.clearMenus();n||"ArrowUp"!==e.key&&"ArrowDown"!==e.key?n&&"Space"!==e.key?i.getInstance(r())._selectMenuItem(e):i.clearMenus():r().click()}}}}]),i}(re);ne.on(document,"keydown.bs.dropdown.data-api",'[data-bs-toggle="dropdown"]',Se.dataApiKeydownHandler),ne.on(document,"keydown.bs.dropdown.data-api",".dropdown-menu",Se.dataApiKeydownHandler),ne.on(document,"click.bs.dropdown.data-api",Se.clearMenus),ne.on(document,"keyup.bs.dropdown.data-api",Se.clearMenus),ne.on(document,"click.bs.dropdown.data-api",'[data-bs-toggle="dropdown"]',(function(e){e.preventDefault(),Se.dropdownInterface(this)})),j(Se);var Me=function(){var e=document.documentElement.clientWidth;return Math.abs(window.innerWidth-e)},Ce=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Me();Oe(),Ae("body","paddingRight",(function(t){return t+e})),Ae(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top","paddingRight",(function(t){return t+e})),Ae(".sticky-top","marginRight",(function(t){return t-e}))},Oe=function(){var e=document.body.style.overflow;e&&ue.setDataAttribute(document.body,"overflow",e),document.body.style.overflow="hidden"},Ae=function(e,t,r){var o=Me();n(e).forEach((function(e){if(!(e!==document.body&&window.innerWidth>e.clientWidth+o)){var n=e.style[t],a=window.getComputedStyle(e)[t];ue.setDataAttribute(e,t,n),e.style[t]=r(Number.parseFloat(a))+"px"}}))},Ne=function(){Ie("body","overflow"),Ie("body","paddingRight"),Ie(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top","paddingRight"),Ie(".sticky-top","marginRight")},Ie=function(e,t){n(e).forEach((function(e){var n=ue.getDataAttribute(e,t);void 0===n?e.style.removeProperty(t):(ue.removeDataAttribute(e,t),e.style[t]=n)}))},je={isVisible:!0,isAnimated:!1,rootElement:document.body,clickCallback:null},qe={isVisible:"boolean",isAnimated:"boolean",rootElement:"element",clickCallback:"(function|null)"},Pe=function(){function e(t){l(this,e),this._config=this._getConfig(t),this._isAppended=!1,this._element=null}return d(e,[{key:"show",value:function(e){this._config.isVisible?(this._append(),this._config.isAnimated&&A(this._getElement()),this._getElement().classList.add("show"),this._emulateAnimation((function(){q(e)}))):q(e)}},{key:"hide",value:function(e){var t=this;this._config.isVisible?(this._getElement().classList.remove("show"),this._emulateAnimation((function(){t.dispose(),q(e)}))):q(e)}},{key:"_getElement",value:function(){if(!this._element){var e=document.createElement("div");e.className="modal-backdrop",this._config.isAnimated&&e.classList.add("fade"),this._element=e}return this._element}},{key:"_getConfig",value:function(e){return(e=y(y({},je),"object"==u(e)?e:{})).rootElement=e.rootElement||document.body,L("backdrop",e,qe),e}},{key:"_append",value:function(){var e=this;this._isAppended||(this._config.rootElement.appendChild(this._getElement()),ne.on(this._getElement(),"mousedown.bs.backdrop",(function(){q(e._config.clickCallback)})),this._isAppended=!0)}},{key:"dispose",value:function(){this._isAppended&&(ne.off(this._element,"mousedown.bs.backdrop"),this._getElement().parentNode.removeChild(this._element),this._isAppended=!1)}},{key:"_emulateAnimation",value:function(e){if(this._config.isAnimated){var t=k(this._getElement());ne.one(this._getElement(),"transitionend",(function(){return q(e)})),D(this._getElement(),t)}else q(e)}}]),e}(),He={backdrop:!0,keyboard:!0,focus:!0},Ye={backdrop:"(boolean|string)",keyboard:"boolean",focus:"boolean"},Ue=function(e){s(n,e);var t=b(n);function n(e,r){var o;return l(this,n),(o=t.call(this,e))._config=o._getConfig(r),o._dialog=a(".modal-dialog",o._element),o._backdrop=o._initializeBackDrop(),o._isShown=!1,o._ignoreBackdropClick=!1,o._isTransitioning=!1,o}return d(n,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;if(!this._isShown&&!this._isTransitioning){this._isAnimated()&&(this._isTransitioning=!0);var n=ne.trigger(this._element,"show.bs.modal",{relatedTarget:e});this._isShown||n.defaultPrevented||(this._isShown=!0,Ce(),document.body.classList.add("modal-open"),this._adjustDialog(),this._setEscapeEvent(),this._setResizeEvent(),ne.on(this._element,"click.dismiss.bs.modal",'[data-bs-dismiss="modal"]',(function(e){return t.hide(e)})),ne.on(this._dialog,"mousedown.dismiss.bs.modal",(function(){ne.one(t._element,"mouseup.dismiss.bs.modal",(function(e){e.target===t._element&&(t._ignoreBackdropClick=!0)}))})),this._showBackdrop((function(){return t._showElement(e)})))}}},{key:"hide",value:function(e){var t=this;if(e&&e.preventDefault(),this._isShown&&!this._isTransitioning&&!ne.trigger(this._element,"hide.bs.modal").defaultPrevented){this._isShown=!1;var n=this._isAnimated();n&&(this._isTransitioning=!0),this._setEscapeEvent(),this._setResizeEvent(),ne.off(document,"focusin.bs.modal"),this._element.classList.remove("show"),ne.off(this._element,"click.dismiss.bs.modal"),ne.off(this._dialog,"mousedown.dismiss.bs.modal"),this._queueCallback((function(){return t._hideModal()}),this._element,n)}}},{key:"dispose",value:function(){[window,this._dialog].forEach((function(e){return ne.off(e,".bs.modal")})),this._backdrop.dispose(),o(r(n.prototype),"dispose",this).call(this),ne.off(document,"focusin.bs.modal")}},{key:"handleUpdate",value:function(){this._adjustDialog()}},{key:"_initializeBackDrop",value:function(){return new Pe({isVisible:Boolean(this._config.backdrop),isAnimated:this._isAnimated()})}},{key:"_getConfig",value:function(e){return e=y(y(y({},He),ue.getDataAttributes(this._element)),e),L("modal",e,Ye),e}},{key:"_showElement",value:function(e){var t=this,n=this._isAnimated(),r=a(".modal-body",this._dialog);this._element.parentNode&&this._element.parentNode.nodeType===Node.ELEMENT_NODE||document.body.appendChild(this._element),this._element.style.display="block",this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.scrollTop=0,r&&(r.scrollTop=0),n&&A(this._element),this._element.classList.add("show"),this._config.focus&&this._enforceFocus(),this._queueCallback((function(){t._config.focus&&t._element.focus(),t._isTransitioning=!1,ne.trigger(t._element,"shown.bs.modal",{relatedTarget:e})}),this._dialog,n)}},{key:"_enforceFocus",value:function(){var e=this;ne.off(document,"focusin.bs.modal"),ne.on(document,"focusin.bs.modal",(function(t){document===t.target||e._element===t.target||e._element.contains(t.target)||e._element.focus()}))}},{key:"_setEscapeEvent",value:function(){var e=this;this._isShown?ne.on(this._element,"keydown.dismiss.bs.modal",(function(t){e._config.keyboard&&"Escape"===t.key?(t.preventDefault(),e.hide()):e._config.keyboard||"Escape"!==t.key||e._triggerBackdropTransition()})):ne.off(this._element,"keydown.dismiss.bs.modal")}},{key:"_setResizeEvent",value:function(){var e=this;this._isShown?ne.on(window,"resize.bs.modal",(function(){return e._adjustDialog()})):ne.off(window,"resize.bs.modal")}},{key:"_hideModal",value:function(){var e=this;this._element.style.display="none",this._element.setAttribute("aria-hidden",!0),this._element.removeAttribute("aria-modal"),this._element.removeAttribute("role"),this._isTransitioning=!1,this._backdrop.hide((function(){document.body.classList.remove("modal-open"),e._resetAdjustments(),Ne(),ne.trigger(e._element,"hidden.bs.modal")}))}},{key:"_showBackdrop",value:function(e){var t=this;ne.on(this._element,"click.dismiss.bs.modal",(function(e){t._ignoreBackdropClick?t._ignoreBackdropClick=!1:e.target===e.currentTarget&&(!0===t._config.backdrop?t.hide():"static"===t._config.backdrop&&t._triggerBackdropTransition())})),this._backdrop.show(e)}},{key:"_isAnimated",value:function(){return this._element.classList.contains("fade")}},{key:"_triggerBackdropTransition",value:function(){var e=this;if(!ne.trigger(this._element,"hidePrevented.bs.modal").defaultPrevented){var t=this._element.scrollHeight>document.documentElement.clientHeight;t||(this._element.style.overflowY="hidden"),this._element.classList.add("modal-static");var n=k(this._dialog);ne.off(this._element,"transitionend"),ne.one(this._element,"transitionend",(function(){e._element.classList.remove("modal-static"),t||(ne.one(e._element,"transitionend",(function(){e._element.style.overflowY=""})),D(e._element,n))})),D(this._element,n),this._element.focus()}}},{key:"_adjustDialog",value:function(){var e=this._element.scrollHeight>document.documentElement.clientHeight,t=Me(),n=t>0;(!n&&e&&!I()||n&&!e&&I())&&(this._element.style.paddingLeft=t+"px"),(n&&!e&&!I()||!n&&e&&I())&&(this._element.style.paddingRight=t+"px")}},{key:"_resetAdjustments",value:function(){this._element.style.paddingLeft="",this._element.style.paddingRight=""}}],[{key:"Default",get:function(){return He}},{key:"NAME",get:function(){return"modal"}},{key:"jQueryInterface",value:function(e,t){return this.each((function(){var r=n.getInstance(this)||new n(this,"object"==u(e)?e:{});if("string"==typeof e){if(void 0===r[e])throw new TypeError('No method named "'.concat(e,'"'));r[e](t)}}))}}]),n}(re);ne.on(document,"click.bs.modal.data-api",'[data-bs-toggle="modal"]',(function(e){var t=this,n=_(this);["A","AREA"].includes(this.tagName)&&e.preventDefault(),ne.one(n,"show.bs.modal",(function(e){e.defaultPrevented||ne.one(n,"hidden.bs.modal",(function(){S(t)&&t.focus()}))})),(Ue.getInstance(n)||new Ue(n)).toggle(this)})),j(Ue);var Re={backdrop:!0,keyboard:!0,scroll:!1},Fe={backdrop:"boolean",keyboard:"boolean",scroll:"boolean"},We=function(e){s(n,e);var t=b(n);function n(e,r){var o;return l(this,n),(o=t.call(this,e))._config=o._getConfig(r),o._isShown=!1,o._backdrop=o._initializeBackDrop(),o._addEventListeners(),o}return d(n,[{key:"toggle",value:function(e){return this._isShown?this.hide():this.show(e)}},{key:"show",value:function(e){var t=this;this._isShown||ne.trigger(this._element,"show.bs.offcanvas",{relatedTarget:e}).defaultPrevented||(this._isShown=!0,this._element.style.visibility="visible",this._backdrop.show(),this._config.scroll||(Ce(),this._enforceFocusOnElement(this._element)),this._element.removeAttribute("aria-hidden"),this._element.setAttribute("aria-modal",!0),this._element.setAttribute("role","dialog"),this._element.classList.add("show"),this._queueCallback((function(){ne.trigger(t._element,"shown.bs.offcanvas",{relatedTarget:e})}),this._element,!0))}},{key:"hide",value:function(){var e=this;this._isShown&&(ne.trigger(this._element,"hide.bs.offcanvas").defaultPrevented||(ne.off(document,"focusin.bs.offcanvas"),this._element.blur(),this._isShown=!1,this._element.classList.remove("show"),this._backdrop.hide(),this._queueCallback((function(){e._element.setAttribute("aria-hidden",!0),e._element.removeAttribute("aria-modal"),e._element.removeAttribute("role"),e._element.style.visibility="hidden",e._config.scroll||Ne(),ne.trigger(e._element,"hidden.bs.offcanvas")}),this._element,!0)))}},{key:"dispose",value:function(){this._backdrop.dispose(),o(r(n.prototype),"dispose",this).call(this),ne.off(document,"focusin.bs.offcanvas")}},{key:"_getConfig",value:function(e){return e=y(y(y({},Re),ue.getDataAttributes(this._element)),"object"==u(e)?e:{}),L("offcanvas",e,Fe),e}},{key:"_initializeBackDrop",value:function(){var e=this;return new Pe({isVisible:this._config.backdrop,isAnimated:!0,rootElement:this._element.parentNode,clickCallback:function(){return e.hide()}})}},{key:"_enforceFocusOnElement",value:function(e){ne.off(document,"focusin.bs.offcanvas"),ne.on(document,"focusin.bs.offcanvas",(function(t){document===t.target||e===t.target||e.contains(t.target)||e.focus()})),e.focus()}},{key:"_addEventListeners",value:function(){var e=this;ne.on(this._element,"click.dismiss.bs.offcanvas",'[data-bs-dismiss="offcanvas"]',(function(){return e.hide()})),ne.on(this._element,"keydown.dismiss.bs.offcanvas",(function(t){e._config.keyboard&&"Escape"===t.key&&e.hide()}))}}],[{key:"NAME",get:function(){return"offcanvas"}},{key:"Default",get:function(){return Re}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=Y(this,"bs.offcanvas")||new n(this,"object"==u(e)?e:{});if("string"==typeof e){if(void 0===t[e]||e.startsWith("_")||"constructor"===e)throw new TypeError('No method named "'.concat(e,'"'));t[e](this)}}))}}]),n}(re);ne.on(document,"click.bs.offcanvas.data-api",'[data-bs-toggle="offcanvas"]',(function(e){var t=this,n=_(this);if(["A","AREA"].includes(this.tagName)&&e.preventDefault(),!M(this)){ne.one(n,"hidden.bs.offcanvas",(function(){S(t)&&t.focus()}));var r=a(".offcanvas.show");r&&r!==n&&We.getInstance(r).hide(),(Y(n,"bs.offcanvas")||new We(n)).toggle(this)}})),ne.on(window,"load.bs.offcanvas.data-api",(function(){n(".offcanvas.show").forEach((function(e){return(Y(e,"bs.offcanvas")||new We(e)).show()}))})),j(We);var Be=new Set(["background","cite","href","itemtype","longdesc","poster","src","xlink:href"]),ze=/^(?:(?:https?|mailto|ftp|tel|file):|[^#&/:?]*(?:[#/?]|$))/i,Qe=/^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[\d+/a-z]+=*$/i;function Xe(e,t,n){var r;if(!e.length)return e;if(n&&"function"==typeof n)return n(e);for(var o=(new window.DOMParser).parseFromString(e,"text/html"),a=Object.keys(t),i=(r=[]).concat.apply(r,g(o.body.querySelectorAll("*"))),s=function(e,n){var r,o=i[e],s=o.nodeName.toLowerCase();if(!a.includes(s))return o.parentNode.removeChild(o),"continue";var u=(r=[]).concat.apply(r,g(o.attributes)),c=[].concat(t["*"]||[],t[s]||[]);u.forEach((function(e){(function(e,t){var n=e.nodeName.toLowerCase();if(t.includes(n))return!Be.has(n)||Boolean(ze.test(e.nodeValue)||Qe.test(e.nodeValue));for(var r=t.filter((function(e){return e instanceof RegExp})),o=0,a=r.length;o<a;o++)if(r[o].test(n))return!0;return!1})(e,c)||o.removeAttribute(e.nodeName)}))},u=0,c=i.length;u<c;u++)s(u);return o.body.innerHTML}var Ge=new RegExp("(^|\\s)bs-tooltip\\S+","g"),Ze=new Set(["sanitize","allowList","sanitizeFn"]),Ke={animation:"boolean",template:"string",title:"(string|element|function)",trigger:"string",delay:"(number|object)",html:"boolean",selector:"(string|boolean)",placement:"(string|function)",offset:"(array|string|function)",container:"(string|element|boolean)",fallbackPlacements:"array",boundary:"(string|element)",customClass:"(string|function)",sanitize:"boolean",sanitizeFn:"(null|function)",allowList:"object",popperConfig:"(null|object|function)"},Ve={AUTO:"auto",TOP:"top",RIGHT:I()?"left":"right",BOTTOM:"bottom",LEFT:I()?"right":"left"},Je={animation:!0,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,selector:!1,placement:"top",offset:[0,0],container:!1,fallbackPlacements:["top","right","bottom","left"],boundary:"clippingParents",customClass:"",sanitize:!0,sanitizeFn:null,allowList:{"*":["class","dir","id","lang","role",/^aria-[\w-]*$/i],a:["target","href","title","rel"],area:[],b:[],br:[],col:[],code:[],div:[],em:[],hr:[],h1:[],h2:[],h3:[],h4:[],h5:[],h6:[],i:[],img:["src","srcset","alt","title","width","height"],li:[],ol:[],p:[],pre:[],s:[],small:[],span:[],sub:[],sup:[],strong:[],u:[],ul:[]},popperConfig:null},$e={HIDE:"hide.bs.tooltip",HIDDEN:"hidden.bs.tooltip",SHOW:"show.bs.tooltip",SHOWN:"shown.bs.tooltip",INSERTED:"inserted.bs.tooltip",CLICK:"click.bs.tooltip",FOCUSIN:"focusin.bs.tooltip",FOCUSOUT:"focusout.bs.tooltip",MOUSEENTER:"mouseenter.bs.tooltip",MOUSELEAVE:"mouseleave.bs.tooltip"},et=function(e){s(i,e);var n=b(i);function i(e,r){var o;if(l(this,i),void 0===t)throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");return(o=n.call(this,e))._isEnabled=!0,o._timeout=0,o._hoverState="",o._activeTrigger={},o._popper=null,o._config=o._getConfig(r),o.tip=null,o._setListeners(),o}return d(i,[{key:"enable",value:function(){this._isEnabled=!0}},{key:"disable",value:function(){this._isEnabled=!1}},{key:"toggleEnabled",value:function(){this._isEnabled=!this._isEnabled}},{key:"toggle",value:function(e){if(this._isEnabled)if(e){var t=this._initializeOnDelegatedTarget(e);t._activeTrigger.click=!t._activeTrigger.click,t._isWithActiveTrigger()?t._enter(null,t):t._leave(null,t)}else{if(this.getTipElement().classList.contains("show"))return void this._leave(null,this);this._enter(null,this)}}},{key:"dispose",value:function(){clearTimeout(this._timeout),ne.off(this._element.closest(".modal"),"hide.bs.modal",this._hideModalHandler),this.tip&&this.tip.parentNode&&this.tip.parentNode.removeChild(this.tip),this._popper&&this._popper.destroy(),o(r(i.prototype),"dispose",this).call(this)}},{key:"show",value:function(){var e,n,r=this;if("none"===this._element.style.display)throw new Error("Please use show on visible elements");if(this.isWithContent()&&this._isEnabled){var o=ne.trigger(this._element,this.constructor.Event.SHOW),a=C(this._element),i=null===a?this._element.ownerDocument.documentElement.contains(this._element):a.contains(this._element);if(!o.defaultPrevented&&i){var s=this.getTipElement(),u=m(this.constructor.NAME);s.setAttribute("id",u),this._element.setAttribute("aria-describedby",u),this.setContent(),this._config.animation&&s.classList.add("fade");var c="function"==typeof this._config.placement?this._config.placement.call(this,s,this._element):this._config.placement,l=this._getAttachment(c);this._addAttachmentClass(l);var f=this._config.container;H(s,this.constructor.DATA_KEY,this),this._element.ownerDocument.documentElement.contains(this.tip)||(f.appendChild(s),ne.trigger(this._element,this.constructor.Event.INSERTED)),this._popper?this._popper.update():this._popper=t.createPopper(this._element,s,this._getPopperConfig(l)),s.classList.add("show");var d="function"==typeof this._config.customClass?this._config.customClass():this._config.customClass;d&&(e=s.classList).add.apply(e,g(d.split(" "))),"ontouchstart"in document.documentElement&&(n=[]).concat.apply(n,g(document.body.children)).forEach((function(e){ne.on(e,"mouseover",O)}));var h=this.tip.classList.contains("fade");this._queueCallback((function(){var e=r._hoverState;r._hoverState=null,ne.trigger(r._element,r.constructor.Event.SHOWN),"out"===e&&r._leave(null,r)}),this.tip,h)}}}},{key:"hide",value:function(){var e,t=this;if(this._popper){var n=this.getTipElement();if(!ne.trigger(this._element,this.constructor.Event.HIDE).defaultPrevented){n.classList.remove("show"),"ontouchstart"in document.documentElement&&(e=[]).concat.apply(e,g(document.body.children)).forEach((function(e){return ne.off(e,"mouseover",O)})),this._activeTrigger.click=!1,this._activeTrigger.focus=!1,this._activeTrigger.hover=!1;var r=this.tip.classList.contains("fade");this._queueCallback((function(){t._isWithActiveTrigger()||("show"!==t._hoverState&&n.parentNode&&n.parentNode.removeChild(n),t._cleanTipClass(),t._element.removeAttribute("aria-describedby"),ne.trigger(t._element,t.constructor.Event.HIDDEN),t._popper&&(t._popper.destroy(),t._popper=null))}),this.tip,r),this._hoverState=""}}}},{key:"update",value:function(){null!==this._popper&&this._popper.update()}},{key:"isWithContent",value:function(){return Boolean(this.getTitle())}},{key:"getTipElement",value:function(){if(this.tip)return this.tip;var e=document.createElement("div");return e.innerHTML=this._config.template,this.tip=e.children[0],this.tip}},{key:"setContent",value:function(){var e=this.getTipElement();this.setElementContent(a(".tooltip-inner",e),this.getTitle()),e.classList.remove("fade","show")}},{key:"setElementContent",value:function(e,t){if(null!==e)return E(t)?(t=x(t),void(this._config.html?t.parentNode!==e&&(e.innerHTML="",e.appendChild(t)):e.textContent=t.textContent)):void(this._config.html?(this._config.sanitize&&(t=Xe(t,this._config.allowList,this._config.sanitizeFn)),e.innerHTML=t):e.textContent=t)}},{key:"getTitle",value:function(){var e=this._element.getAttribute("data-bs-original-title");return e||(e="function"==typeof this._config.title?this._config.title.call(this._element):this._config.title),e}},{key:"updateAttachment",value:function(e){return"right"===e?"end":"left"===e?"start":e}},{key:"_initializeOnDelegatedTarget",value:function(e,t){var n=this.constructor.DATA_KEY;return(t=t||Y(e.delegateTarget,n))||(t=new this.constructor(e.delegateTarget,this._getDelegateConfig()),H(e.delegateTarget,n,t)),t}},{key:"_getOffset",value:function(){var e=this,t=this._config.offset;return"string"==typeof t?t.split(",").map((function(e){return Number.parseInt(e,10)})):"function"==typeof t?function(n){return t(n,e._element)}:t}},{key:"_getPopperConfig",value:function(e){var t=this,n={placement:e,modifiers:[{name:"flip",options:{fallbackPlacements:this._config.fallbackPlacements}},{name:"offset",options:{offset:this._getOffset()}},{name:"preventOverflow",options:{boundary:this._config.boundary}},{name:"arrow",options:{element:".".concat(this.constructor.NAME,"-arrow")}},{name:"onChange",enabled:!0,phase:"afterWrite",fn:function(e){return t._handlePopperPlacementChange(e)}}],onFirstUpdate:function(e){e.options.placement!==e.placement&&t._handlePopperPlacementChange(e)}};return y(y({},n),"function"==typeof this._config.popperConfig?this._config.popperConfig(n):this._config.popperConfig)}},{key:"_addAttachmentClass",value:function(e){this.getTipElement().classList.add("bs-tooltip-"+this.updateAttachment(e))}},{key:"_getAttachment",value:function(e){return Ve[e.toUpperCase()]}},{key:"_setListeners",value:function(){var e=this;this._config.trigger.split(" ").forEach((function(t){if("click"===t)ne.on(e._element,e.constructor.Event.CLICK,e._config.selector,(function(t){return e.toggle(t)}));else if("manual"!==t){var n="hover"===t?e.constructor.Event.MOUSEENTER:e.constructor.Event.FOCUSIN,r="hover"===t?e.constructor.Event.MOUSELEAVE:e.constructor.Event.FOCUSOUT;ne.on(e._element,n,e._config.selector,(function(t){return e._enter(t)})),ne.on(e._element,r,e._config.selector,(function(t){return e._leave(t)}))}})),this._hideModalHandler=function(){e._element&&e.hide()},ne.on(this._element.closest(".modal"),"hide.bs.modal",this._hideModalHandler),this._config.selector?this._config=y(y({},this._config),{},{trigger:"manual",selector:""}):this._fixTitle()}},{key:"_fixTitle",value:function(){var e=this._element.getAttribute("title"),t=u(this._element.getAttribute("data-bs-original-title"));(e||"string"!==t)&&(this._element.setAttribute("data-bs-original-title",e||""),!e||this._element.getAttribute("aria-label")||this._element.textContent||this._element.setAttribute("aria-label",e),this._element.setAttribute("title",""))}},{key:"_enter",value:function(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusin"===e.type?"focus":"hover"]=!0),t.getTipElement().classList.contains("show")||"show"===t._hoverState?t._hoverState="show":(clearTimeout(t._timeout),t._hoverState="show",t._config.delay&&t._config.delay.show?t._timeout=setTimeout((function(){"show"===t._hoverState&&t.show()}),t._config.delay.show):t.show())}},{key:"_leave",value:function(e,t){t=this._initializeOnDelegatedTarget(e,t),e&&(t._activeTrigger["focusout"===e.type?"focus":"hover"]=t._element.contains(e.relatedTarget)),t._isWithActiveTrigger()||(clearTimeout(t._timeout),t._hoverState="out",t._config.delay&&t._config.delay.hide?t._timeout=setTimeout((function(){"out"===t._hoverState&&t.hide()}),t._config.delay.hide):t.hide())}},{key:"_isWithActiveTrigger",value:function(){for(var e in this._activeTrigger)if(this._activeTrigger[e])return!0;return!1}},{key:"_getConfig",value:function(e){var t=ue.getDataAttributes(this._element);return Object.keys(t).forEach((function(e){Ze.has(e)&&delete t[e]})),(e=y(y(y({},this.constructor.Default),t),"object"==u(e)&&e?e:{})).container=!1===e.container?document.body:x(e.container),"number"==typeof e.delay&&(e.delay={show:e.delay,hide:e.delay}),"number"==typeof e.title&&(e.title=e.title.toString()),"number"==typeof e.content&&(e.content=e.content.toString()),L("tooltip",e,this.constructor.DefaultType),e.sanitize&&(e.template=Xe(e.template,e.allowList,e.sanitizeFn)),e}},{key:"_getDelegateConfig",value:function(){var e={};if(this._config)for(var t in this._config)this.constructor.Default[t]!==this._config[t]&&(e[t]=this._config[t]);return e}},{key:"_cleanTipClass",value:function(){var e=this.getTipElement(),t=e.getAttribute("class").match(Ge);null!==t&&t.length>0&&t.map((function(e){return e.trim()})).forEach((function(t){return e.classList.remove(t)}))}},{key:"_handlePopperPlacementChange",value:function(e){var t=e.state;t&&(this.tip=t.elements.popper,this._cleanTipClass(),this._addAttachmentClass(this._getAttachment(t.placement)))}}],[{key:"Default",get:function(){return Je}},{key:"NAME",get:function(){return"tooltip"}},{key:"Event",get:function(){return $e}},{key:"DefaultType",get:function(){return Ke}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=Y(this,"bs.tooltip"),n="object"==u(e)&&e;if((t||!/dispose|hide/.test(e))&&(t||(t=new i(this,n)),"string"==typeof e)){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]()}}))}}]),i}(re);j(et);var tt=new RegExp("(^|\\s)bs-popover\\S+","g"),nt=y(y({},et.Default),{},{placement:"right",offset:[0,8],trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'}),rt=y(y({},et.DefaultType),{},{content:"(string|element|function)"}),ot={HIDE:"hide.bs.popover",HIDDEN:"hidden.bs.popover",SHOW:"show.bs.popover",SHOWN:"shown.bs.popover",INSERTED:"inserted.bs.popover",CLICK:"click.bs.popover",FOCUSIN:"focusin.bs.popover",FOCUSOUT:"focusout.bs.popover",MOUSEENTER:"mouseenter.bs.popover",MOUSELEAVE:"mouseleave.bs.popover"},at=function(e){s(n,e);var t=b(n);function n(){return l(this,n),t.apply(this,arguments)}return d(n,[{key:"isWithContent",value:function(){return this.getTitle()||this._getContent()}},{key:"setContent",value:function(){var e=this.getTipElement();this.setElementContent(a(".popover-header",e),this.getTitle());var t=this._getContent();"function"==typeof t&&(t=t.call(this._element)),this.setElementContent(a(".popover-body",e),t),e.classList.remove("fade","show")}},{key:"_addAttachmentClass",value:function(e){this.getTipElement().classList.add("bs-popover-"+this.updateAttachment(e))}},{key:"_getContent",value:function(){return this._element.getAttribute("data-bs-content")||this._config.content}},{key:"_cleanTipClass",value:function(){var e=this.getTipElement(),t=e.getAttribute("class").match(tt);null!==t&&t.length>0&&t.map((function(e){return e.trim()})).forEach((function(t){return e.classList.remove(t)}))}}],[{key:"Default",get:function(){return nt}},{key:"NAME",get:function(){return"popover"}},{key:"Event",get:function(){return ot}},{key:"DefaultType",get:function(){return rt}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=Y(this,"bs.popover"),r="object"==u(e)?e:null;if((t||!/dispose|hide/.test(e))&&(t||(t=new n(this,r),H(this,"bs.popover",t)),"string"==typeof e)){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]()}}))}}]),n}(et);j(at);var it={offset:10,method:"auto",target:""},st={offset:"number",method:"string",target:"(string|element)"},ut=function(e){s(h,e);var t=b(h);function h(e,n){var r;return l(this,h),(r=t.call(this,e))._scrollElement="BODY"===r._element.tagName?window:r._element,r._config=r._getConfig(n),r._selector="".concat(r._config.target," .nav-link, ").concat(r._config.target," .list-group-item, ").concat(r._config.target," .dropdown-item"),r._offsets=[],r._targets=[],r._activeTarget=null,r._scrollHeight=0,ne.on(r._scrollElement,"scroll.bs.scrollspy",(function(){return r._process()})),r.refresh(),r._process(),r}return d(h,[{key:"refresh",value:function(){var e=this,t=this._scrollElement===this._scrollElement.window?"offset":"position",r="auto"===this._config.method?t:this._config.method,o="position"===r?this._getScrollTop():0;this._offsets=[],this._targets=[],this._scrollHeight=this._getScrollHeight(),n(this._selector).map((function(e){var t=w(e),n=t?a(t):null;if(n){var i=n.getBoundingClientRect();if(i.width||i.height)return[ue[r](n).top+o,t]}return null})).filter((function(e){return e})).sort((function(e,t){return e[0]-t[0]})).forEach((function(t){e._offsets.push(t[0]),e._targets.push(t[1])}))}},{key:"dispose",value:function(){ne.off(this._scrollElement,".bs.scrollspy"),o(r(h.prototype),"dispose",this).call(this)}},{key:"_getConfig",value:function(e){if("string"!=typeof(e=y(y(y({},it),ue.getDataAttributes(this._element)),"object"==u(e)&&e?e:{})).target&&E(e.target)){var t=e.target.id;t||(t=m("scrollspy"),e.target.id=t),e.target="#"+t}return L("scrollspy",e,st),e}},{key:"_getScrollTop",value:function(){return this._scrollElement===window?this._scrollElement.pageYOffset:this._scrollElement.scrollTop}},{key:"_getScrollHeight",value:function(){return this._scrollElement.scrollHeight||Math.max(document.body.scrollHeight,document.documentElement.scrollHeight)}},{key:"_getOffsetHeight",value:function(){return this._scrollElement===window?window.innerHeight:this._scrollElement.getBoundingClientRect().height}},{key:"_process",value:function(){var e=this._getScrollTop()+this._config.offset,t=this._getScrollHeight(),n=this._config.offset+t-this._getOffsetHeight();if(this._scrollHeight!==t&&this.refresh(),e>=n){var r=this._targets[this._targets.length-1];this._activeTarget!==r&&this._activate(r)}else{if(this._activeTarget&&e<this._offsets[0]&&this._offsets[0]>0)return this._activeTarget=null,void this._clear();for(var o=this._offsets.length;o--;)this._activeTarget!==this._targets[o]&&e>=this._offsets[o]&&(void 0===this._offsets[o+1]||e<this._offsets[o+1])&&this._activate(this._targets[o])}}},{key:"_activate",value:function(e){this._activeTarget=e,this._clear();var t=this._selector.split(",").map((function(t){return"".concat(t,'[data-bs-target="').concat(e,'"],').concat(t,'[href="').concat(e,'"]')})),n=a(t.join(","));n.classList.contains("dropdown-item")?(a(".dropdown-toggle",n.closest(".dropdown")).classList.add("active"),n.classList.add("active")):(n.classList.add("active"),c(n,".nav, .list-group").forEach((function(e){f(e,".nav-link, .list-group-item").forEach((function(e){return e.classList.add("active")})),f(e,".nav-item").forEach((function(e){i(e,".nav-link").forEach((function(e){return e.classList.add("active")}))}))}))),ne.trigger(this._scrollElement,"activate.bs.scrollspy",{relatedTarget:e})}},{key:"_clear",value:function(){n(this._selector).filter((function(e){return e.classList.contains("active")})).forEach((function(e){return e.classList.remove("active")}))}}],[{key:"Default",get:function(){return it}},{key:"NAME",get:function(){return"scrollspy"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=h.getInstance(this)||new h(this,"object"==u(e)?e:{});if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]()}}))}}]),h}(re);ne.on(window,"load.bs.scrollspy.data-api",(function(){n('[data-bs-spy="scroll"]').forEach((function(e){return new ut(e)}))})),j(ut);var ct=function(e){s(r,e);var t=b(r);function r(){return l(this,r),t.apply(this,arguments)}return d(r,[{key:"show",value:function(){var e=this;if(!this._element.parentNode||this._element.parentNode.nodeType!==Node.ELEMENT_NODE||!this._element.classList.contains("active")){var t,r=_(this._element),o=this._element.closest(".nav, .list-group");if(o){var a="UL"===o.nodeName||"OL"===o.nodeName?":scope > li > .active":".active";t=(t=n(a,o))[t.length-1]}var i=t?ne.trigger(t,"hide.bs.tab",{relatedTarget:this._element}):null;if(!(ne.trigger(this._element,"show.bs.tab",{relatedTarget:t}).defaultPrevented||null!==i&&i.defaultPrevented)){this._activate(this._element,o);var s=function(){ne.trigger(t,"hidden.bs.tab",{relatedTarget:e._element}),ne.trigger(e._element,"shown.bs.tab",{relatedTarget:t})};r?this._activate(r,r.parentNode,s):s()}}}},{key:"_activate",value:function(e,t,r){var o=this,a=(!t||"UL"!==t.nodeName&&"OL"!==t.nodeName?i(t,".active"):n(":scope > li > .active",t))[0],s=r&&a&&a.classList.contains("fade"),u=function(){return o._transitionComplete(e,a,r)};a&&s?(a.classList.remove("show"),this._queueCallback(u,e,!0)):u()}},{key:"_transitionComplete",value:function(e,t,r){if(t){t.classList.remove("active");var o=a(":scope > .dropdown-menu .active",t.parentNode);o&&o.classList.remove("active"),"tab"===t.getAttribute("role")&&t.setAttribute("aria-selected",!1)}e.classList.add("active"),"tab"===e.getAttribute("role")&&e.setAttribute("aria-selected",!0),A(e),e.classList.contains("fade")&&e.classList.add("show");var i=e.parentNode;if(i&&"LI"===i.nodeName&&(i=i.parentNode),i&&i.classList.contains("dropdown-menu")){var s=e.closest(".dropdown");s&&n(".dropdown-toggle",s).forEach((function(e){return e.classList.add("active")})),e.setAttribute("aria-expanded",!0)}r&&r()}}],[{key:"NAME",get:function(){return"tab"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=Y(this,"bs.tab")||new r(this);if("string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e]()}}))}}]),r}(re);ne.on(document,"click.bs.tab.data-api",'[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]',(function(e){["A","AREA"].includes(this.tagName)&&e.preventDefault(),M(this)||(Y(this,"bs.tab")||new ct(this)).show()})),j(ct);var lt={animation:"boolean",autohide:"boolean",delay:"number"},ft={animation:!0,autohide:!0,delay:5e3},dt=function(e){s(n,e);var t=b(n);function n(e,r){var o;return l(this,n),(o=t.call(this,e))._config=o._getConfig(r),o._timeout=null,o._hasMouseInteraction=!1,o._hasKeyboardInteraction=!1,o._setListeners(),o}return d(n,[{key:"show",value:function(){var e=this;ne.trigger(this._element,"show.bs.toast").defaultPrevented||(this._clearTimeout(),this._config.animation&&this._element.classList.add("fade"),this._element.classList.remove("hide"),A(this._element),this._element.classList.add("showing"),this._queueCallback((function(){e._element.classList.remove("showing"),e._element.classList.add("show"),ne.trigger(e._element,"shown.bs.toast"),e._maybeScheduleHide()}),this._element,this._config.animation))}},{key:"hide",value:function(){var e=this;this._element.classList.contains("show")&&(ne.trigger(this._element,"hide.bs.toast").defaultPrevented||(this._element.classList.remove("show"),this._queueCallback((function(){e._element.classList.add("hide"),ne.trigger(e._element,"hidden.bs.toast")}),this._element,this._config.animation)))}},{key:"dispose",value:function(){this._clearTimeout(),this._element.classList.contains("show")&&this._element.classList.remove("show"),o(r(n.prototype),"dispose",this).call(this)}},{key:"_getConfig",value:function(e){return e=y(y(y({},ft),ue.getDataAttributes(this._element)),"object"==u(e)&&e?e:{}),L("toast",e,this.constructor.DefaultType),e}},{key:"_maybeScheduleHide",value:function(){var e=this;this._config.autohide&&(this._hasMouseInteraction||this._hasKeyboardInteraction||(this._timeout=setTimeout((function(){e.hide()}),this._config.delay)))}},{key:"_onInteraction",value:function(e,t){switch(e.type){case"mouseover":case"mouseout":this._hasMouseInteraction=t;break;case"focusin":case"focusout":this._hasKeyboardInteraction=t}if(t)this._clearTimeout();else{var n=e.relatedTarget;this._element===n||this._element.contains(n)||this._maybeScheduleHide()}}},{key:"_setListeners",value:function(){var e=this;ne.on(this._element,"click.dismiss.bs.toast",'[data-bs-dismiss="toast"]',(function(){return e.hide()})),ne.on(this._element,"mouseover.bs.toast",(function(t){return e._onInteraction(t,!0)})),ne.on(this._element,"mouseout.bs.toast",(function(t){return e._onInteraction(t,!1)})),ne.on(this._element,"focusin.bs.toast",(function(t){return e._onInteraction(t,!0)})),ne.on(this._element,"focusout.bs.toast",(function(t){return e._onInteraction(t,!1)}))}},{key:"_clearTimeout",value:function(){clearTimeout(this._timeout),this._timeout=null}}],[{key:"DefaultType",get:function(){return lt}},{key:"Default",get:function(){return ft}},{key:"NAME",get:function(){return"toast"}},{key:"jQueryInterface",value:function(e){return this.each((function(){var t=Y(this,"bs.toast");if(t||(t=new n(this,"object"==u(e)&&e)),"string"==typeof e){if(void 0===t[e])throw new TypeError('No method named "'.concat(e,'"'));t[e](this)}}))}}]),n}(re);return j(dt),{Alert:oe,Button:ae,Carousel:pe,Collapse:ye,Dropdown:Se,Modal:Ue,Offcanvas:We,Popover:at,ScrollSpy:ut,Tab:ct,Toast:dt,Tooltip:et}},"object"==("undefined"==typeof exports?"undefined":u(exports))?e.exports=_(n(750)):"function"==typeof define&&n.amdO?define(["@popperjs/core"],_):(w="undefined"!=typeof globalThis?globalThis:w||self).bootstrap=_(w.Popper)},515:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o),i=document.querySelector(".profile__settings-email"),s=document.querySelector(".change__email-loading-spinner"),u=document.querySelector(".form__update-email"),c=document.querySelectorAll(".alert__change-email"),l=document.querySelectorAll(".change__email-alert-message");u.addEventListener("submit",(function(e){e.preventDefault(),s.classList.remove("d-none"),function(){var e=(0,r.Z)(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/change-email",{method:"PUT",headers:{"Content-Type":"application/json"},mode:"cors",cache:"no-cache",body:JSON.stringify({email:i.value})});case 2:if(!(t=e.sent).ok){e.next=10;break}return e.next=6,t.json();case 6:return n=e.sent,e.abrupt("return",n);case 10:if(409!==t.status){e.next=15;break}return r=t.json(),e.abrupt("return",r);case 15:return e.abrupt("return");case 16:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()().then((function(e){1===e.success&&(c[0].classList.remove("d-none"),l[0].innerHTML=e.success_message,s.classList.add("d-none"),setTimeout((function(){c[0].classList.add("d-none")}),5e3)),1===e.error&&(c[1].classList.remove("d-none"),l[1].innerHTML=e.error_message,s.classList.add("d-none"),setTimeout((function(){c[1].classList.add("d-none")}),5e3))})).catch((function(e){return console.error(e)}))}))},591:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o),i=document.querySelector(".form__profile-change-password"),s=document.querySelector(".change__password-btn"),u=document.querySelector(".show__password"),c=document.querySelectorAll(".change__password-field"),l=document.querySelectorAll(".password__checker"),f=document.querySelectorAll(".bi-check-circle-fill"),d=document.querySelector(".change__password-loading-spinner"),h=document.querySelectorAll(".alert__change-password"),m=document.querySelectorAll(".change__password-alert-message");u.addEventListener("change",(function(e){e.preventDefault(),c.forEach((function(e){var t="password"===e.getAttribute("type")?"text":"password";e.setAttribute("type",t),u.checked,e.setAttribute("type",t)}))})),c[1].addEventListener("input",(function(e){e.preventDefault(),l[0].classList.remove("d-none"),e.target.value.length>=8?(l[0].classList.remove("text-danger"),l[0].classList.add("text-success"),f[0].classList.remove("d-none")):(l[0].classList.remove("text-success"),l[0].classList.add("text-danger"),f[0].classList.add("d-none"))})),c[2].addEventListener("input",(function(e){e.preventDefault(),l[1].classList.remove("d-none"),e.target.value===c[1].value&&e.target.value.length>=8?(l[1].classList.remove("text-danger"),l[1].classList.add("text-success"),l[1].innerHTML='Password matched. <i class="bi bi-check-circle-fill f_size-1"></i>',s.removeAttribute("disabled")):(l[1].classList.remove("text-success"),l[1].classList.add("text-danger"),l[1].innerHTML=e.target.value>=8?"Password matched":"Password should be at least 8 characters long.",s.setAttribute("disabled","true"))})),i.addEventListener("submit",(function(e){e.preventDefault(),d.classList.remove("d-none"),s.setAttribute("disabled","true"),function(){var e=(0,r.Z)(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("/change-password",e.prev=1,c[1].value!==c[2].value){e.next=21;break}return e.next=5,fetch("/change-password",{method:"PUT",headers:{"Content-Type":"application/json"},mode:"cors",cache:"no-cache",body:JSON.stringify({current_password:c[0].value,new_password:c[1].value,confirm_new_password:c[2].value})});case 5:if(!(t=e.sent).ok){e.next=13;break}return e.next=9,t.json();case 9:return n=e.sent,e.abrupt("return",n);case 13:if(401!==t.status){e.next=20;break}return e.next=16,t.json();case 16:return r=e.sent,e.abrupt("return",r);case 20:return e.abrupt("return");case 21:e.next=26;break;case 23:e.prev=23,e.t0=e.catch(1),console.error(e.t0.message);case 26:case"end":return e.stop()}}),e,null,[[1,23]])})));return function(){return e.apply(this,arguments)}}()().then((function(e){d.classList.add("d-none"),e.error&&(h[1].classList.remove("d-none"),h[1].classList.add("error__shake"),m[1].textContent=e.error_message,l.forEach((function(e){return e.classList.add("d-none")})),c.forEach((function(e){return e.value=""})),s.setAttribute("disabled","true"),setTimeout((function(){h[1].classList.add("d-none")}),6e3)),e.success&&(h[0].classList.remove("d-none"),m[0].textContent=e.success_message,l.forEach((function(e){return e.classList.add("d-none")})),c.forEach((function(e){return e.value=""})),s.setAttribute("disabled","true"),setTimeout((function(){h[0].classList.add("d-none")}),6e3))})).catch((function(e){console.error(e)}))}))},793:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o);window.addEventListener("load",(0,r.Z)(a().mark((function e(){var t,n,o,i,s,u;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t=document.querySelector(".btn__comment"),n=document.querySelector(".form__comment"),o=document.querySelector(".loading-spinner"),i=sessionStorage,s="new_comment",u=document.querySelectorAll(".comment__body"),n.addEventListener("submit",(function(e){e.preventDefault(),o.classList.remove("d-none"),function(){var e=(0,r.Z)(a().mark((function e(){var n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/post",{method:"POST",headers:{"Content-Type":"application/json"},mode:"cors",credentials:"include",body:JSON.stringify({comment_body:tinymce.get("commentField").getContent(),post_id:t.dataset.postId,subject_id:t.dataset.subjectId})});case 2:if(!(n=e.sent).ok){e.next=8;break}return e.next=6,n.json();case 6:return r=e.sent,e.abrupt("return",r);case 8:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()().then((function(e){console.log("Comment Success",e),tinymce.get("commentField").setContent("".trim()),i.setItem(s,e.new_comment),window.location.href=e.url})).catch((function(e){return console.error(e)}))})),function(){for(var e=i.getItem(s),t=function(t){Array.from(u).indexOf(u[t]),u[t].getAttribute("id")===e&&(window.location.hash="#".concat(e),u[t].classList.add("new__comment"),setTimeout((function(){u[t].classList.add("fade__new-comment")}),4e3))},n=0;n<u.length;n++)t(n);i.clear()}();case 9:case"end":return e.stop()}}),e)}))))},599:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o);window.addEventListener("DOMContentLoaded",(function(){var e,t=localStorage,n=(localStorage,localStorage),o=(localStorage,"recover_post_title"),i=document.querySelector(".form__create-post"),s=document.querySelector(".create__post-title-field"),u=document.querySelector(".create__post-subject-field"),c=document.querySelector(".create__post-tag-field"),l=document.querySelector(".create__post-subject-dialog-toggler"),f=document.querySelectorAll(".message__indicator"),d=document.querySelectorAll(".message__indicator-spinner"),h=document.querySelector(".confirm__subject-name"),m=document.querySelector(".publish__post-spinner"),p=document.querySelector(".create__post-thumbnail-picker"),g=document.querySelector(".create__post-thumbnail-preview"),v=document.querySelector(".create__post-thumbnail-wrapper");s.value=t.getItem(o),c.value=n.getItem("recover_post_tag"),u.value="",s.addEventListener("input",(function(e){e.preventDefault(),t.setItem(o,e.target.value)})),u.addEventListener("focus",(function(e){e.preventDefault(),l.click()})),u.addEventListener("keypress",(function(e){e.preventDefault()})),c.addEventListener("input",(function(e){e.preventDefault(),t.setItem("recover_post_tag",e.target.value)})),p.addEventListener("change",(function(t){var n=p.files[0],o=new FileReader;o.addEventListener("load",function(){var t=(0,r.Z)(a().mark((function t(r){return a().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:v.classList.add("preview__thumbnail"),g.src=o.result,e=n;case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),!1),n&&o.readAsDataURL(n)}));var y=document.querySelector(".create__post-select-year"),b=document.querySelector(".create__post-select-semester"),w=document.querySelector(".create__post-select-subject");y.innerHTML="<option disabled selected>----</option>",b.innerHTML="<option disabled selected>----</option>",w.innerHTML="<option disabled selected>----</option>",function(){var e=(0,r.Z)(a().mark((function e(){var t,n,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/get-year-level",{method:"GET",cache:"no-cache",mode:"cors"});case 2:if(!(t=e.sent).ok){e.next=10;break}return e.next=6,t.json();case 6:return n=e.sent,e.abrupt("return",n);case 10:if(403!==t.status){e.next=15;break}return e.next=13,t.json();case 13:return r=e.sent,e.abrupt("return",r);case 15:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()().then((function(e){if(1===e.success){var t=["st","nd","rd","th"],n=e.year_level.sort((function(e,t){return e.year_level_number-t.year_level_number}));console.log(n);for(var r=0;r<n.length;r++){var o=document.createElement("option");o.setAttribute("class","option__year"),o.value=n[r].year_level_id,o.innerHTML="".concat(n[r].year_level_number).concat(t[r]),y.appendChild(o)}}})).catch((function(e){return console.error(e)})),y.addEventListener("change",(function(e){f[0].classList.remove("d-none"),d[0].classList.remove("d-none");var t=e.target.value;_(t).then((function(e){if(e.semester.length>0){if(1===e.success){T("Semester was found",0);for(var t=0;t<e.semester.length;t++){var n=document.createElement("option");n.setAttribute("class","option__semester"),n.value=e.semester[t].semester_id,n.innerHTML="".concat(e.semester[t].semester_year_count," Semester"),n.setAttribute("data-year-level",e.semester[t].year_level_id),b.appendChild(n)}}}else E("No Semester was found",0),f[1].classList.add("d-none"),b.innerHTML="<option disabled selected>----</option>",w.innerHTML="<option disabled selected>----</option>"})).catch((function(e){return console.error(e)}))})),b.addEventListener("change",(function(e){f[1].classList.remove("d-none"),d[1].classList.remove("d-none");var t=e.target.options[e.target.selectedIndex].dataset.yearLevel,n=e.target.value;k(n,t).then((function(e){if(e.subjects.length>0){if(1===e.success){T("Subject was found",1);for(var t=0;t<e.subjects.length;t++){var n=document.createElement("option");n.setAttribute("class","option__subjects"),n.value=e.subjects[t].subject_id,n.innerHTML="".concat(e.subjects[t].subject_name," - ").concat(e.subjects[t].subject_description),w.appendChild(n)}}}else E("No subject was found",1),w.innerHTML='"<option disabled selected>----</option>"'})).catch((function(e){return console.error(e)}))})),w.addEventListener("change",(function(e){var t=[e.target.options[e.target.selectedIndex]];x(t[0].textContent,t[0].value),h.addEventListener("click",(function(e){u.value=t[0].textContent,u.setAttribute("data-subject-id",t[0].value),l.setAttribute("data-bs-dismiss","modal"),l.click()}))})),i.addEventListener("submit",(function(t){t.preventDefault(),m.classList.remove("d-none");var n=new FormData(i);n.append("post_title",s.value),n.append("post_subject",u.dataset.subjectId),n.append("post_tag",c.value),n.append("post_body",tinymce.get("shareAnswerForm").getContent()),n.append("post_thumbnail",e),function(){var e=(0,r.Z)(a().mark((function e(){var t,r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/create-post",{method:"POST",body:n,mode:"cors",cache:"no-cache"});case 2:if(!(t=e.sent).ok){e.next=10;break}return e.next=6,t.json();case 6:return r=e.sent,e.abrupt("return",r);case 10:if(400!==t.status){e.next=15;break}return e.next=13,t.json();case 13:return o=e.sent,e.abrupt("return",o);case 15:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()().then((function(e){if(1===e.success){var t=localStorage.getItem("user_email"),n=localStorage.getItem("notif_state");localStorage.clear(),localStorage.setItem("user_email",t),localStorage.setItem("notif_state",n),window.location.href=e.url}1===e.error&&(alert(e.error_message),window.location.reload())})).catch((function(e){return console.error(e)}))}));var _=function(){var e=(0,r.Z)(a().mark((function e(t){var n,r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/get-sem-for-year-level",{method:"POST",headers:{"Content-Type":"application/json"},mode:"cors",cache:"no-cache",body:JSON.stringify({year_level_id:t})});case 2:if(!(n=e.sent).ok){e.next=8;break}return r=n.json(),e.abrupt("return",r);case 8:if(403!==n.status){e.next=13;break}return e.next=11,n.json();case 11:return o=e.sent,e.abrupt("return",o);case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),k=function(){var e=(0,r.Z)(a().mark((function e(t,n){var r,o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/get-subject-for-semester-and-year-level",{method:"POST",headers:{"Content-Type":"application/json"},mode:"cors",cache:"no-cache",body:JSON.stringify({semester_id:t,year_level_id:n})});case 2:if(!(r=e.sent).ok){e.next=8;break}return o=r.json(),e.abrupt("return",o);case 8:if(403!==r.status){e.next=13;break}return e.next=11,r.json();case 11:return i=e.sent,e.abrupt("return",i);case 13:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),T=function(e,t){d[t].classList.add("d-none"),f[t].classList.remove("text-danger"),f[t].classList.add("text-success"),f[t].textContent=e},E=function(e,t){d[t].classList.add("d-none"),f[t].classList.remove("text-success"),f[t].classList.add("text-danger"),f[t].textContent=e},x=function(e,t){return console.log(e,t),{subject_name:e,subject_id:t}}}))},835:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o);window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".form__forgot-password"),t=document.querySelector(".recover__email"),n=document.querySelector(".loading__spinner-forgot-password"),o=document.querySelector(".btn__password-reset"),i=document.querySelector(".password__reset-message"),s=document.querySelector(".loading-circle-other"),u=document.querySelector(".email__success-icon"),c=document.querySelector(".email__error-icon"),l=document.querySelector(".btn-close");e.addEventListener("submit",(function(e){e.preventDefault(),n.classList.remove("d-none");var f=[["type","button"],["data-bs-toggle","modal"],["data-bs-target","dialogForgotPasswordAlert"]];o.setAttribute(f[0][0],"button"),o.setAttribute(f[1][0],"modal"),o.setAttribute(f[2][0],"#dialogForgotPasswordAlert"),o.click(),function(){var e=(0,r.Z)(a().mark((function e(){var n,r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch("/forgot-password",{method:"POST",headers:{"Content-type":"application/json"},mode:"cors",cache:"no-cache",body:JSON.stringify({recovery_email:t.value})});case 3:if(!(n=e.sent).ok){e.next=11;break}return e.next=7,n.json();case 7:return r=e.sent,e.abrupt("return",r);case 11:if(401!==n.status){e.next=16;break}return e.next=14,n.json();case 14:return o=e.sent,e.abrupt("return",o);case 16:e.next=21;break;case 18:e.prev=18,e.t0=e.catch(0),console.error(e.t0);case 21:case"end":return e.stop()}}),e,null,[[0,18]])})));return function(){return e.apply(this,arguments)}}()().then((function(e){for(var t in n.classList.add("d-none"),f)o.removeAttribute(f[t][0]);1===e.error&&(s.classList.add("d-none"),c.classList.remove("d-none"),i.classList.replace("text-black-50","text-danger"),i.textContent=e.error_message),1===e.success&&(s.classList.add("d-none"),u.classList.remove("d-none"),i.classList.replace("text-black-50","text-success"),i.textContent=e.success_message),l.addEventListener("click",(function(){s.classList.remove("d-none"),u.classList.add("d-none"),c.classList.add("d-none"),i.classList.remove("text-danger"),i.classList.remove("text-success"),i.classList.add("text-black-50"),i.textContent="Sending password reset request, Please Wait"}))})).catch((function(e){return console.error(e)}))}))}))},485:function(e,t,n){"use strict";n.r(t);var r=n.p+"11d3f3b20d1239d14eb0e738b96392f7.png";window.addEventListener("DOMContentLoaded",(function(){document.querySelectorAll(".logo").forEach((function(e){return e.src=r}))}))},231:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o);window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".loading-container"),t=document.querySelector(".btn__sign-in"),n=document.querySelector(".remember-me"),o=document.querySelector(".form__container-login"),i=document.querySelector(".user__email"),s=document.querySelector(".user__password"),u=localStorage,c=u.getItem("user_email");i.value=c;var l=u.getItem("remember_me_state");n.checked="true"===l,n.addEventListener("change",(function(e){if(e.preventDefault(),n.checked){u.setItem("remember_me_state",!0)}else{u.setItem("remember_me_state",!1)}})),o.addEventListener("submit",(function(t){t.preventDefault(),e.classList.remove("d-none"),function(){var e=(0,r.Z)(a().mark((function e(){var t,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/sign-in",{method:"POST",headers:{"Content-Type":"application/json"},mode:"cors",cache:"no-cache",credentials:"include",body:JSON.stringify({remember_me:!!n.checked,email:i.value,password:s.value})});case 2:if(!(t=e.sent).ok){e.next=10;break}return e.next=6,t.json();case 6:return r=e.sent,e.abrupt("return",r);case 10:t.status>=400&&t.status<=499&&window.location.reload();case 11:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()().then((function(e){window.location.href=e.authenticate_url})).catch((function(e){return console.error(e)}))})),t.addEventListener("click",(function(){var e={user_email:i.value};u.setItem("user_email",e.user_email)}))}))},429:function(){window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".burger-toggler"),t=document.querySelector(".--nav-list-container"),n=!1;e&&e.addEventListener("click",(function(){n?(e.classList.remove("open"),t.classList.remove("open-navbar"),n=!1):(e.classList.add("open"),t.classList.add("open-navbar"),n=!0)}))}))},6:function(){},205:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o);window.addEventListener("DOMContentLoaded",(function(){for(var e=document.querySelectorAll(".pin__post"),t=document.querySelectorAll(".option-container"),n=document.querySelectorAll(".delete__option-btn"),o=document.querySelectorAll(".custom__delete-dialog"),i=document.querySelectorAll(".custom__dialog-btn-cancel"),s=document.querySelectorAll(".custom__dialog-btn-confirm"),u=document.querySelectorAll(".pin__option-btn"),c=document.querySelectorAll(".unpin__option-btn"),l=!1,f=function(n){e[n].addEventListener("click",(function(r){t[n].classList.add("d-none"),l?(t[n].classList.add("d-none"),l=!1):(t[n].classList.remove("d-none"),l=!0),h(r,e[n].dataset.postId)}))},d=0;d<e.length;d++)f(d);for(var h=function(t){Array.from(e).indexOf(t.target)},m=function(e){n[e].addEventListener("click",(function(t){o[e].classList.remove("d-none"),g(t)})),i[e].addEventListener("click",(function(t){o[e].classList.add("d-none"),v(t)})),s[e].addEventListener("click",(function(t){y(t,s[e].dataset.postId)}))},p=0;p<n.length;p++)m(p);for(var g=function(e){Array.from(n).indexOf(e.target)},v=function(e){Array.from(i).indexOf(e.target)},y=function(e,t){Array.from(s).indexOf(e.target),function(){var e=(0,r.Z)(a().mark((function e(){var n,r,o,i;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,n="/post-options?post_id=".concat(t),e.next=4,fetch(n,{method:"DELETE",cache:"no-cache",mode:"cors"});case 4:return r=e.sent,e.next=7,r.json();case 7:if(o=e.sent,!r.ok){e.next=12;break}return e.abrupt("return",o);case 12:return i={error:"Something went wrong on deleting the content."},e.abrupt("return",i);case 14:e.next=19;break;case 16:e.prev=16,e.t0=e.catch(0),console.error(e.t0);case 19:case"end":return e.stop()}}),e,null,[[0,16]])})));return function(){return e.apply(this,arguments)}}()().then((function(e){window.location.href=e.url})).catch((function(e){return console.error(e)}))},b=function(e){u[e].addEventListener("click",(function(t){t.preventDefault(),T(t,u[e].dataset.postId)}))},w=0;w<u.length;w++)b(w);for(var _=function(e){c[e].addEventListener("click",(function(t){t.preventDefault(),E(t,c[e].dataset.postId)}))},k=0;k<c.length;k++)_(k);var T=function(e,t){Array.from(u).indexOf(e.target);x(e,t,!0).then((function(e){window.location.href=e.url}))},E=function(e,t){Array.from(c).indexOf(e.target);x(e,t,!1).then((function(e){window.location.href=e.url}))},x=function(){var e=(0,r.Z)(a().mark((function e(t,n,r){var o,i,s,u;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,o="/post-options/update?post_id=".concat(n),e.next=4,fetch(o,{method:"PUT",headers:{"Content-Type":"application/json"},cache:"no-cache",mode:"cors",body:JSON.stringify({pin_post:r})});case 4:return i=e.sent,e.next=7,i.json();case 7:if(s=e.sent,!i.ok){e.next=12;break}return e.abrupt("return",s);case 12:return u={message:"Something went wrong on pinning the post"},e.abrupt("return",u);case 14:e.next=19;break;case 16:e.prev=16,e.t0=e.catch(0),console.error(e.t0);case 19:case"end":return e.stop()}}),e,null,[[0,16]])})));return function(t,n,r){return e.apply(this,arguments)}}()}))},369:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o);window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".btn__delete-answer"),t=e.dataset.postId,n=document.querySelectorAll(".loading-spinner"),o=document.querySelector(".update__form"),i=document.querySelector(".update__title"),s=document.querySelector(".update__tag"),u=(document.querySelector(".update__body"),document.querySelector(".btn__update-answer").dataset.postId);e.addEventListener("click",(function(e){e.preventDefault(),n.forEach((function(e){return e.classList.remove("d-none")})),function(){var e=(0,r.Z)(a().mark((function e(){var n,r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch("/post-options?post_id=".concat(t),{method:"DELETE",cache:"no-cache",mode:"cors"});case 3:return n=e.sent,e.next=6,n.json();case 6:if(r=e.sent,!n.ok){e.next=11;break}return e.abrupt("return",r);case 11:return o={error:"Something went wrong on deleting the content."},e.abrupt("return",o);case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(0),console.error(e.t0);case 18:case"end":return e.stop()}}),e,null,[[0,15]])})));return function(){return e.apply(this,arguments)}}()().then((function(e){window.location.href=e.url})).catch((function(e){return console.error(e)}))})),o.addEventListener("submit",(function(e){e.preventDefault(),n.forEach((function(e){return e.classList.remove("d-none")}));var t={post_title:i.value,post_tag:s.value,post_body:tinymce.get("shareAnswerForm").getContent()};(function(){var e=(0,r.Z)(a().mark((function e(){var n,r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch("/post-options?post_id=".concat(u),{method:"PUT",headers:{"Content-Type":"application/json"},cache:"no-cache",mode:"cors",body:JSON.stringify(t)});case 3:return n=e.sent,e.next=6,n.json();case 6:if(r=e.sent,!n.ok){e.next=11;break}return e.abrupt("return",r);case 11:return o={message:"Something went wrong when attempted to update the answer."},e.abrupt("return",o);case 13:e.next=18;break;case 15:e.prev=15,e.t0=e.catch(0),console.error(e.t0);case 18:case"end":return e.stop()}}),e,null,[[0,15]])})));return function(){return e.apply(this,arguments)}})()().then((function(e){window.location.href=e.url})).catch((function(e){return console.error(e)}))}))}))},104:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o);window.addEventListener("DOMContentLoaded",(function(){document.querySelector(".show__password")&&n(591),n(515);var e,t=document.querySelectorAll(".dropdown__profile-info-option-toggler"),o=document.querySelector(".change__password-option"),i=document.querySelector(".change__email-option"),s=document.querySelector(".btn__update-profile-info"),u=!1;t[0].addEventListener("click",(function(){u?(i.classList.remove("open"),s&&s.classList.remove("d-none"),u=!1):(i.classList.add("open"),s&&s.classList.add("d-none"),u=!0)})),t[1].addEventListener("click",(function(){u?(o.classList.remove("open"),s&&s.classList.remove("d-none"),u=!1):(o.classList.add("open"),s&&s.classList.add("d-none"),u=!0)}));var c=document.querySelector(".upload__profile-image-picker"),l=document.querySelector(".profile__settings-alert"),f=document.querySelector(".profile__settings-alert-text");c.addEventListener("change",(function(){var t=c.files[0],n=document.querySelector(".preview__profile-image"),o=new FileReader;o.addEventListener("load",(0,r.Z)(a().mark((function r(){return a().wrap((function(r){for(;;)switch(r.prev=r.next){case 0:if(r.prev=0,3145728,!(t.size<3145728)){r.next=7;break}n.src=o.result,e=function(){return t},r.next=11;break;case 7:throw l.classList.remove("d-none"),l.classList.add("error__shake"),setTimeout((function(){l.classList.add("d-none")}),6e3),new Error("Image size is too large");case 11:r.next=16;break;case 13:r.prev=13,r.t0=r.catch(0),f.textContent=r.t0.message;case 16:case"end":return r.stop()}}),r,null,[[0,13]])}))),!1),t&&o.readAsDataURL(t)}));var d=document.querySelector(".form__profile-settings"),h=document.querySelector(".profile__settings-fullname"),m=document.querySelector(".loading-spinner"),p=document.querySelector(".loading__profile-settings");d.addEventListener("submit",(function(t){t.preventDefault(),m.classList.remove("d-none"),p.classList.remove("d-none"),s.removeAttribute("for"),s.removeAttribute("role");var n=new FormData(d);n.append("profile_image",e),n.append("fullname",h.value),function(){var e=(0,r.Z)(a().mark((function e(){var t,r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return"/profile-info-update",e.next=3,fetch("/profile-info-update",{method:"PUT",mode:"cors",cache:"no-cache",body:n});case 3:if(!(t=e.sent).ok){e.next=9;break}return e.next=7,t.json();case 7:return r=e.sent,e.abrupt("return",r);case 9:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}()().then((function(e){window.location.href=e.url})).catch((function(e){return console.error(e)}))}))}))},625:function(){window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".reg_user_name"),t=document.querySelector(".reg_user_email"),n=document.querySelector(".reg_user_password"),r=document.querySelector(".reg_user_confirm_password"),o=document.querySelector(".form__container-register"),a=document.querySelector(".password__checker"),i=document.querySelector(".confirm__password-checker"),s=document.querySelectorAll(".bi-check-circle-fill"),u=document.querySelector(".show__password"),c="register_user_name",l="register_user_email",f=sessionStorage,d={user_name:f.getItem(c),user_email:f.getItem(l)};e.value=d.user_name,t.value=d.user_email,f.clear();var h=localStorage;o.addEventListener("submit",(function(){f.setItem(c,e.value),f.setItem(l,t.value),h.setItem("user_email",t.value)})),n.addEventListener("input",(function(e){e.preventDefault(),a.classList.remove("d-none"),e.target.value.length>=8?(a.classList.remove("text-danger"),a.classList.add("text-success"),s[0].classList.remove("d-none")):(a.classList.add("text-danger"),a.classList.remove("text-success"),s[0].classList.add("d-none"))})),r.addEventListener("input",(function(e){e.preventDefault(),i.classList.remove("d-none"),e.target.value===n.value?(i.classList.remove("text-danger"),i.classList.add("text-success"),i.innerHTML='Password matched. <i class="bi bi-check-circle-fill f_size-1"></i>'):(i.classList.add("text-danger"),i.classList.remove("text-success"),i.innerHTML="Password do not matched.")}));var m=document.querySelectorAll("input[type=password]");u.addEventListener("change",(function(e){e.preventDefault(),m.forEach((function(e){var t="password"===e.getAttribute("type")?"text":"password";e.setAttribute("type",t),u.checked,e.setAttribute("type",t)}))}))}))},857:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o),i=document.querySelector(".password_reset__loading"),s=document.querySelector(".form__reset-password"),u=document.querySelectorAll('input[type="password"]'),c=document.querySelector('input[type="checkbox"]'),l=document.querySelector(".btn__password-reset");fetch("/q",{method:"GET"}).then((function(e){return e.json()})).then((function(e){e&&i.classList.add("d-none")})).catch((function(e){return console.error(e)})),c.addEventListener("change",(function(e){e.preventDefault(),c.checked?u.forEach((function(e){e.setAttribute("type","text")})):u.forEach((function(e){e.setAttribute("type","password")}))}));var f=function(){var e=document.createElement("p");return e.innerHTML="Password should be at least 8 characters long.",e.classList.add("reset__password-checker"),e.classList.add("d-none"),e.classList.add("text-danger"),e.classList.add("fw_600"),e.classList.add("f_size-3"),e};u[0].parentNode.insertBefore(f(),u[0].nextSibling),u[1].parentNode.insertBefore(f(),u[1].nextSibling);var d=document.querySelectorAll(".reset__password-checker");u[0].addEventListener("input",(function(e){e.preventDefault(),d[0].classList.remove("d-none"),e.target.value.length>=8?(d[0].classList.remove("text-danger"),d[0].classList.add("text-success"),d[0].innerHTML='Password should be at least 8 characters long. <i class="bi bi-check-circle-fill f_size-1"></i>'):(d[0].classList.remove("text-success"),d[0].classList.add("text-danger"),d[0].innerHTML="Password should be at least 8 characters long.")})),u[1].addEventListener("input",(function(e){e.preventDefault(),d[1].classList.remove("d-none"),e.target.value===u[0].value&&e.target.value.length>=8?(d[1].classList.remove("text-danger"),d[1].classList.add("text-success"),d[1].innerHTML='Password matched. <i class="bi bi-check-circle-fill f_size-1"></i>',l.removeAttribute("disabled")):(d[1].classList.remove("text-success"),d[1].classList.add("text-danger"),d[1].innerHTML=e.target.value===u[0].value?"Password should be at least 8 characters long.":"Password do not matched.",l.setAttribute("disabled","true"))}));var h=[["type","button"],["data-bs-toggle","modal"],["data-bs-target","dialogPasswordReset"]],m=document.querySelectorAll(".password__reset-status-icon"),p=document.querySelector(".password__reset-message"),g=document.querySelector(".password__reset-loading");s.addEventListener("submit",(function(e){(e.preventDefault(),l.setAttribute(h[0][0],"button"),l.setAttribute(h[1][0],"modal"),l.setAttribute(h[2][0],"#dialogResetPasswordAlert"),l.click(),u[0].value===u[1].value)?function(){var e=(0,r.Z)(a().mark((function e(){var t,n,r,o,i,s,c;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,t=window.location.search,n=t.split("?")[1],r=n.split("&"),"/reset-password",e.next=7,fetch("/reset-password",{method:"PUT",headers:{"Content-Type":"application/json"},mode:"cors",cache:"no-cache",body:JSON.stringify({new_password:u[0].value,confirm_new_password:u[1].value,prt:r[0].replace("prt=",""),prs:r[1].replace("prs=","")})});case 7:if(!(o=e.sent).ok){e.next=13;break}return i=o.json(),e.abrupt("return",i);case 13:if(226!==o.status){e.next=18;break}return s=o.json(),e.abrupt("return",s);case 18:if(409!==o.status){e.next=23;break}return c=o.json(),e.abrupt("return",c);case 23:return e.abrupt("return");case 24:e.next=29;break;case 26:e.prev=26,e.t0=e.catch(0),console.error(e.t0);case 29:case"end":return e.stop()}}),e,null,[[0,26]])})));return function(){return e.apply(this,arguments)}}()().then((function(e){1===e.success&&(g.classList.add("d-none"),m[0].classList.remove("d-none"),p.innerHTML=e.success_message),1===e.error&&(g.classList.add("d-none"),m[1].classList.remove("d-none"),p.innerHTML=e.error_message)})).catch((function(e){return console.error(e)})):(d[1].classList.remove("text-success"),d[1].classList.add("text-danger"),d[1].innerHTML=e.target.value===u[0].value?"Password should be at least 8 characters long.":"Password do not matched.",l.setAttribute("disabled","true"))}))},49:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o),i=n(677),s=i.formatDistanceToNow,u=(i.add,i.parseISO),c=i.formatRelative;window.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".search__toggle-btn"),t=document.querySelector(".search__field-container"),n=document.querySelector(".search__btn-close"),o=document.querySelector(".search__by-btn"),i=document.querySelector(".search-by-dialog"),l=document.querySelector(".search__input-field"),f=document.querySelector(".post__results-container");f.innerHTML='<div class="loading__search-result loading-content d-none"></div>';var d=document.querySelector(".loading__search-result"),h=!1,m=!1;e.addEventListener("click",(function(e){e.preventDefault(),console.log(e.key),h?(t.classList.remove("open"),t.classList.add("close"),h=!0):(t.classList.remove("close"),t.classList.add("open"),h=!1)})),n.addEventListener("click",(function(e){e.preventDefault(),t.classList.remove("open"),t.classList.add("close")})),o.addEventListener("click",(function(e){e.preventDefault(),m?(i.classList.add("d-none"),m=!1):(i.classList.remove("d-none"),m=!0)})),window.addEventListener("keypress",(function(e){"Enter"==e.key&&(i.classList.remove("d-none"),e.preventDefault())}));var p=document.querySelector(".search__by-title"),g=document.querySelector(".search__by-user"),v=document.querySelector(".search__by-subject"),y=document.querySelector(".search__by-tag");p.addEventListener("click",function(){var e=(0,r.Z)(a().mark((function e(t){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t.preventDefault(),d.classList.remove("d-none"),i.classList.add("d-none"),m=!1,f.innerHTML='<div class="loading__search-result loading-content"></div>',"key_title",b(l.value,"key_title").then((function(e){_(e,"Title")})).catch((function(e){return console.error(e)}));case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),g.addEventListener("click",function(){var e=(0,r.Z)(a().mark((function e(t){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t.preventDefault(),d.classList.remove("d-none"),i.classList.add("d-none"),m=!1,f.innerHTML='<div class="loading__search-result loading-content"></div>',"key_user",b(l.value,"key_user").then((function(e){_(e,"Person")})).catch((function(e){return console.error(e)}));case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),v.addEventListener("click",function(){var e=(0,r.Z)(a().mark((function e(t){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t.preventDefault(),d.classList.remove("d-none"),i.classList.add("d-none"),m=!1,f.innerHTML='<div class="loading__search-result loading-content"></div>',"key_subject",b(l.value,"key_subject").then((function(e){_(e,"Subject")})).catch((function(e){return console.error(e)}));case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),y.addEventListener("click",function(){var e=(0,r.Z)(a().mark((function e(t){return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:t.preventDefault(),d.classList.remove("d-none"),i.classList.add("d-none"),m=!1,f.innerHTML='<div class="loading__search-result loading-content"></div>',"key_tag",b(l.value,"key_tag").then((function(e){_(e,"Tag")})).catch((function(e){return console.error(e)}));case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}());var b=function(){var e=(0,r.Z)(a().mark((function e(t,n){var r,o;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("/search-result",{method:"POST",headers:{"Content-Type":"application/json"},mode:"cors",body:JSON.stringify({search_params:t,search_by:n})});case 2:if(!(r=e.sent).ok){e.next=6;break}return o=r.json(),e.abrupt("return",o);case 6:case"end":return e.stop()}}),e)})));return function(t,n){return e.apply(this,arguments)}}(),w=['<svg id="Capa_1" enable-background="new 0 0 511.096 511.096" height="16" viewBox="0 0 511.096 511.096" width="16"\n        xmlns="http://www.w3.org/2000/svg" fillColor="#ff0000">\n        <g id="Speech_Bubble_48_">\n          <g>\n            <path style="fill: #730000"\n              d="m74.414 480.548h-36.214l25.607-25.607c13.807-13.807 22.429-31.765 24.747-51.246-59.127-38.802-88.554-95.014-88.554-153.944 0-108.719 99.923-219.203 256.414-219.203 165.785 0 254.682 101.666 254.682 209.678 0 108.724-89.836 210.322-254.682 210.322-28.877 0-59.01-3.855-85.913-10.928-25.467 26.121-59.973 40.928-96.087 40.928z" />\n          </g>\n        </g>\n      </svg>'],_=function(e,t){if(1===e.found&&function(){f.innerHTML='<div class="loading__search-result loading-content d-none"></div>';var n=document.createElement("h6");n.setAttribute("class","text-white"),n.innerText="Result found (".concat(e.results.length,"), Search related by ").concat(t),f.appendChild(n);for(var r=function(t){var n=document.createElement("div");n.innerHTML='\n        <article class="post__result-article post__result-float" data-post-id="'.concat(e.results[t].post_id,'" data-subject-id="').concat(e.results[t].subject_id,'">\n          <h5 class="fw_600 m-0">').concat(e.results[t].post_title).concat(e.results[t].post_pin?'<sup class="badge bg-primary f_size-5 mx-1">Pinned<i class="bi bi-pin-angle-fill ms-1"></i></sup>':"").concat(e.results[t].post_created_at!==e.results[t].post_updated_at?'<sup class="badge bg-danger f_size-5 mx-1">Updated<i class="bi bi-star-fill ms-1"></i></sup>':"",'</h5>\n          <div class="d-flex align-items-center flex-wrap">\n            <div class="post__result-image-container">\n              <img class="post__result-user-image" src="').concat(e.results[t].profile_image_url,'" loading="lazy">\n            </div>\n            <h6 class="post__result-user-name f_size-3 fw_500 mx-1 m-0">').concat(e.results[t].user_fullname,"<span>").concat(2==e.results[t].user_state?'<sup class="post__result-admin-tag badge bg-success">Admin</sup>':"",'</span></h6>•<h6 class="f_size-3 fw_500 mx-1 m-0">').concat(s(u(e.results[t].post_created_at),{addSuffix:!0}),'</h6>•<h6 class="f_size-3 fw_500 mx-1 m-0">').concat(c(u(e.results[t].post_created_at),new Date),'</h6>\n          </div>\n          <div class="post__result-sub-header d-flex align-items-center flex-wrap">\n            <div class="post__result-tag fw_600 mx-1 f_size-3">').concat(e.results[t].post_tag,'</div>\n            <div class="post__result-subject fw_600 border mx-1 f_size-3">').concat(e.results[t].subject_name,"</div>\n            ").concat(parseInt(e.results[t].comment_count)>0?'<div class="post__result-comment-count fw_600 mx-1 f_size-3">'.concat(w[0],"&nbsp;(").concat(e.results[t].comment_count,")</div>"):"","\n          </div\n        </article>"),f.appendChild(n)},o=0;o<e.results.length;o++)r(o);for(var a=document.querySelectorAll(".post__result-article"),i=function(e){a[e].addEventListener("click",(function(t){Array.from(a).indexOf(t.target);var n=a[e].dataset.postId,r=a[e].dataset.subjectId;window.location.href="/post?post_id=".concat(n,"&subject_id=").concat(r)}))},l=0;l<a.length;l++)i(l)}(),0===e.found){f.innerHTML='<div class="loading__search-result loading-content d-none"></div>';var n=document.createElement("h3");n.textContent="Result found (0), Search by ".concat(t),n.setAttribute("class","text-center text-white my-3"),f.appendChild(n)}}}))},635:function(){window.addEventListener("DOMContentLoaded",(function(){for(var e=document.querySelectorAll(".subject__dropdown"),t=document.querySelectorAll(".subject__dropdown-group"),n=document.querySelectorAll(".subject__dropdown-btn"),r=document.querySelectorAll(".fa-chevron-right"),o=function(o){var a=!1;n[o].addEventListener("click",(function(n){a?(t[o].classList.remove("subject__dropdown-open"),e[o].classList.remove("subject__dropdown-open"),r[o].classList.remove("icon-rotate"),a=!1):(t[o].classList.add("subject__dropdown-open"),e[o].classList.add("subject__dropdown-open"),r[o].classList.add("icon-rotate"),a=!0),i(n)}))},a=0;a<t.length;a++)o(a);var i=function(t){Array.from(e).indexOf(t.target)}}))},278:function(e){var t=['<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">\n  <path d="M1.293 1.293a1 1 0 0 1 1.414 0L8 6.586l5.293-5.293a1 1 0 1 1 1.414 1.414L9.414 8l5.293 5.293a1 1 0 0 1-1.414 1.414L8 9.414l-5.293 5.293a1 1 0 0 1-1.414-1.414L6.586 8 1.293 2.707a1 1 0 0 1 0-1.414z"/>\n</svg>','<svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" fill="currentColor" class="bi bi-cloud-arrow-down-fill" viewBox="0 0 16 16">\n  <path d="M8 2a5.53 5.53 0 0 0-3.594 1.342c-.766.66-1.321 1.52-1.464 2.383C1.266 6.095 0 7.555 0 9.318 0 11.366 1.708 13 3.781 13h8.906C14.502 13 16 11.57 16 9.773c0-1.636-1.242-2.969-2.834-3.194C12.923 3.999 10.69 2 8 2zm2.354 6.854-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 9.293V5.5a.5.5 0 0 1 1 0v3.793l1.146-1.147a.5.5 0 0 1 .708.708z"/>\n</svg>'];e.exports={createZoomLayout:function(e,n){var r=document.createElement("div");r.setAttribute("class","zoom__image-container");var o=document.createElement("div");o.setAttribute("class","zoom__layout d-flex align-items-center justify-content-center flex-column");var a=document.createElement("div");a.setAttribute("class","zoom__close-btn-wrapper d-flex justify-content-end");var i=document.createElement("button");i.setAttribute("type","button"),i.setAttribute("class","zoom__close-btn");var s=document.createElement("a");s.setAttribute("class","zoom__download-btn"),s.href=e.concat("?","sp=racwdl&st=2021-07-29T08:08:16Z&se=2025-07-29T16:08:16Z&sv=2020-08-04&sr=c&sig=l51q3fPqjBl3Ky3h897AMA83Pq%2B04m09nbq4KbMDyyI%3D");var u=document.createElement("div");u.setAttribute("class","zoom__image-wrapper");var c=document.createElement("img");return c.setAttribute("class","zoom__main-image"),c.setAttribute("loading","lazy"),r.appendChild(a),r.appendChild(o),a.appendChild(s),a.appendChild(i),i.innerHTML=t[0],s.innerHTML=t[1],o.appendChild(u),u.appendChild(c),c.src=e,c.addEventListener("click",(function(e){e.preventDefault(),r.classList.add("d-none"),document.querySelectorAll(".container").forEach((function(e){return e.style.cssText="filter: none"}))})),i.addEventListener("click",(function(e){e.preventDefault(),r.classList.add("d-none"),document.querySelectorAll(".container").forEach((function(e){return e.style.cssText="filter: none"}))})),s.addEventListener("click",(function(t){try{s.download="".concat(e.replace("https://insiderhub.blob.core.windows.net/images/",""))}catch(e){alert("Error downloading the image. Try to long press and press download image/save image")}})),{zoomImageContainer:r,zoomCloseBtnWrapper:a}}}},18:function(e,t,n){"use strict";n.r(t);var r=n(137),o=n(757),a=n.n(o),i=n(278).createZoomLayout;document.querySelectorAll("img").forEach((function(e){e.classList.add("zoom__image-able"),e.setAttribute("loading","lazy")}));for(var s=document.querySelectorAll(".zoom__image-able"),u=function(e){s[e].addEventListener("click",(function(t){Array.from(s).indexOf(t.target);var n=s[e].getAttribute("src");document.querySelectorAll(".container").forEach((function(e){return e.style.cssText="filter: blur(5px)"})),l(n.trim()),document.body.appendChild(i(n.trim()).zoomImageContainer)}))},c=0;c<s.length;c++)u(c);var l=function(e){var t=e.replace("https://insiderhub.blob.core.windows.net/images/",""),n="".concat(e,"?comp=properties&").concat("sp=racwdl&st=2021-07-29T08:08:16Z&se=2025-07-29T16:08:16Z&sv=2020-08-04&sr=c&sig=l51q3fPqjBl3Ky3h897AMA83Pq%2B04m09nbq4KbMDyyI%3D"),o=e.match(/(png|jpeg|jpg|gif|svg|webp|ico)/g);console.log(n),function(){var e=(0,r.Z)(a().mark((function e(){var r;return a().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch(n,{method:"PUT",headers:{"Content-Type":"image/".concat(o[0]),"x-ms-blob-content-type":"image/".concat(o[0]),"x-ms-blob-content-disposition":'attachment; filename="'.concat(t,'"'),"x-ms-blob-type":"BlockBlob"},mode:"cors"});case 3:if(200!==e.sent.status){e.next=9;break}return r={ok:1},e.abrupt("return",r);case 9:throw Error("Error when downloading the image");case 10:e.next=15;break;case 12:e.prev=12,e.t0=e.catch(0),console.error(e.t0);case 15:case"end":return e.stop()}}),e,null,[[0,12]])})));return function(){return e.apply(this,arguments)}}()().then((function(t){i(e.trim(),t).zoomCloseBtnWrapper.innerHTML="<h1>HELLO WORLD</h1>"})).catch((function(e){alert(e.message)}))}},677:function(e,t,n){"use strict";function r(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function o(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function a(e){o(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function i(e,t){o(2,arguments);var n=a(e),i=r(t);return isNaN(i)?new Date(NaN):i?(n.setDate(n.getDate()+i),n):n}function s(e,t){o(2,arguments);var n=a(e),i=r(t);if(isNaN(i))return new Date(NaN);if(!i)return n;var s=n.getDate(),u=new Date(n.getTime());u.setMonth(n.getMonth()+i+1,0);var c=u.getDate();return s>=c?u:(n.setFullYear(u.getFullYear(),u.getMonth(),s),n)}function u(e,t){if(o(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var n="years"in t?r(t.years):0,u="months"in t?r(t.months):0,c="weeks"in t?r(t.weeks):0,l="days"in t?r(t.days):0,f="hours"in t?r(t.hours):0,d="minutes"in t?r(t.minutes):0,h="seconds"in t?r(t.seconds):0,m=a(e),p=u||n?s(m,u+12*n):m,g=l||c?i(p,l+7*c):p,v=d+60*f,y=h+60*v,b=1e3*y,w=new Date(g.getTime()+b);return w}function c(e){o(1,arguments);var t=a(e),n=t.getDay();return 0===n||6===n}function l(e){return o(1,arguments),0===a(e).getDay()}function f(e){return o(1,arguments),6===a(e).getDay()}function d(e,t){o(2,arguments);var n=a(e),i=c(n),s=r(t);if(isNaN(s))return new Date(NaN);var u=n.getHours(),d=s<0?-1:1,h=r(s/5);n.setDate(n.getDate()+7*h);for(var m=Math.abs(s%5);m>0;)n.setDate(n.getDate()+d),c(n)||(m-=1);return i&&c(n)&&0!==s&&(f(n)&&n.setDate(n.getDate()+(d<0?2:-1)),l(n)&&n.setDate(n.getDate()+(d<0?1:-2))),n.setHours(u),n}function h(e,t){o(2,arguments);var n=a(e).getTime(),i=r(t);return new Date(n+i)}n.r(t),n.d(t,{add:function(){return u},addBusinessDays:function(){return d},addDays:function(){return i},addHours:function(){return p},addISOWeekYears:function(){return x},addMilliseconds:function(){return h},addMinutes:function(){return D},addMonths:function(){return s},addQuarters:function(){return L},addSeconds:function(){return S},addWeeks:function(){return M},addYears:function(){return C},areIntervalsOverlapping:function(){return O},closestIndexTo:function(){return A},closestTo:function(){return N},compareAsc:function(){return I},compareDesc:function(){return j},daysInWeek:function(){return q},daysToWeeks:function(){return G},differenceInBusinessDays:function(){return V},differenceInCalendarDays:function(){return T},differenceInCalendarISOWeekYears:function(){return J},differenceInCalendarISOWeeks:function(){return ee},differenceInCalendarMonths:function(){return te},differenceInCalendarQuarters:function(){return re},differenceInCalendarWeeks:function(){return ae},differenceInCalendarYears:function(){return ie},differenceInDays:function(){return ue},differenceInHours:function(){return fe},differenceInISOWeekYears:function(){return he},differenceInMilliseconds:function(){return ce},differenceInMinutes:function(){return me},differenceInMonths:function(){return ye},differenceInQuarters:function(){return be},differenceInSeconds:function(){return we},differenceInWeeks:function(){return _e},differenceInYears:function(){return ke},eachDayOfInterval:function(){return Te},eachHourOfInterval:function(){return Ee},eachMinuteOfInterval:function(){return De},eachMonthOfInterval:function(){return Le},eachQuarterOfInterval:function(){return Me},eachWeekOfInterval:function(){return Ce},eachWeekendOfInterval:function(){return Oe},eachWeekendOfMonth:function(){return Ne},eachWeekendOfYear:function(){return qe},eachYearOfInterval:function(){return Pe},endOfDay:function(){return pe},endOfDecade:function(){return He},endOfHour:function(){return Ye},endOfISOWeek:function(){return Re},endOfISOWeekYear:function(){return Fe},endOfMinute:function(){return We},endOfMonth:function(){return ge},endOfQuarter:function(){return Be},endOfSecond:function(){return ze},endOfToday:function(){return Qe},endOfTomorrow:function(){return Xe},endOfWeek:function(){return Ue},endOfYear:function(){return je},endOfYesterday:function(){return Ge},format:function(){return Ut},formatDistance:function(){return Qt},formatDistanceStrict:function(){return Vt},formatDistanceToNow:function(){return Jt},formatDistanceToNowStrict:function(){return $t},formatDuration:function(){return tn},formatISO:function(){return nn},formatISO9075:function(){return rn},formatISODuration:function(){return on},formatRFC3339:function(){return an},formatRFC7231:function(){return cn},formatRelative:function(){return ln},fromUnixTime:function(){return fn},getDate:function(){return dn},getDay:function(){return hn},getDayOfYear:function(){return mn},getDaysInMonth:function(){return pn},getDaysInYear:function(){return vn},getDecade:function(){return yn},getHours:function(){return bn},getISODay:function(){return wn},getISOWeek:function(){return kn},getISOWeekYear:function(){return y},getISOWeeksInYear:function(){return En},getMilliseconds:function(){return xn},getMinutes:function(){return Dn},getMonth:function(){return Ln},getOverlappingDaysInIntervals:function(){return Mn},getQuarter:function(){return ne},getSeconds:function(){return Cn},getTime:function(){return On},getUnixTime:function(){return An},getWeek:function(){return qn},getWeekOfMonth:function(){return Pn},getWeekYear:function(){return Nn},getWeeksInMonth:function(){return Yn},getYear:function(){return Un},hoursToMilliseconds:function(){return Rn},hoursToMinutes:function(){return Fn},hoursToSeconds:function(){return Wn},intervalToDuration:function(){return Xn},intlFormat:function(){return Gn},isAfter:function(){return Kn},isBefore:function(){return Vn},isDate:function(){return Jn},isEqual:function(){return $n},isExists:function(){return er},isFirstDayOfMonth:function(){return tr},isFriday:function(){return nr},isFuture:function(){return rr},isLastDayOfMonth:function(){return ve},isLeapYear:function(){return gn},isMatch:function(){return Zr},isMonday:function(){return Kr},isPast:function(){return Vr},isSameDay:function(){return K},isSameHour:function(){return $r},isSameISOWeek:function(){return to},isSameISOWeekYear:function(){return no},isSameMinute:function(){return ro},isSameMonth:function(){return oo},isSameQuarter:function(){return ao},isSameSecond:function(){return so},isSameWeek:function(){return eo},isSameYear:function(){return uo},isSaturday:function(){return f},isSunday:function(){return l},isThisHour:function(){return co},isThisISOWeek:function(){return lo},isThisMinute:function(){return fo},isThisMonth:function(){return ho},isThisQuarter:function(){return mo},isThisSecond:function(){return po},isThisWeek:function(){return go},isThisYear:function(){return vo},isThursday:function(){return yo},isToday:function(){return bo},isTomorrow:function(){return wo},isTuesday:function(){return _o},isValid:function(){return Z},isWednesday:function(){return ko},isWeekend:function(){return c},isWithinInterval:function(){return To},isYesterday:function(){return Eo},lastDayOfDecade:function(){return xo},lastDayOfISOWeek:function(){return Lo},lastDayOfISOWeekYear:function(){return So},lastDayOfMonth:function(){return Hn},lastDayOfQuarter:function(){return Mo},lastDayOfWeek:function(){return Do},lastDayOfYear:function(){return Co},lightFormat:function(){return jo},max:function(){return Po},maxTime:function(){return P},milliseconds:function(){return Yo},millisecondsInHour:function(){return Y},millisecondsInMinute:function(){return H},millisecondsInSecond:function(){return U},millisecondsToHours:function(){return Uo},millisecondsToMinutes:function(){return Ro},millisecondsToSeconds:function(){return Fo},min:function(){return Wo},minTime:function(){return R},minutesInHour:function(){return F},minutesToHours:function(){return Bo},minutesToMilliseconds:function(){return zo},minutesToSeconds:function(){return Qo},monthsInQuarter:function(){return W},monthsInYear:function(){return B},monthsToQuarters:function(){return Xo},monthsToYears:function(){return Go},nextDay:function(){return Ko},nextFriday:function(){return Jo},nextMonday:function(){return $o},nextSaturday:function(){return ea},nextSunday:function(){return ta},nextThursday:function(){return na},nextTuesday:function(){return ra},nextWednesday:function(){return oa},parse:function(){return Qr},parseISO:function(){return la},parseJSON:function(){return wa},quartersInYear:function(){return z},quartersToMonths:function(){return _a},quartersToYears:function(){return ka},roundToNearestMinutes:function(){return Ta},secondsInHour:function(){return Q},secondsInMinute:function(){return X},secondsToHours:function(){return Ea},secondsToMilliseconds:function(){return xa},secondsToMinutes:function(){return Da},set:function(){return Sa},setDate:function(){return Ma},setDay:function(){return Ca},setDayOfYear:function(){return Oa},setHours:function(){return Aa},setISODay:function(){return Na},setISOWeek:function(){return Ia},setISOWeekYear:function(){return E},setMilliseconds:function(){return ja},setMinutes:function(){return qa},setMonth:function(){return La},setQuarter:function(){return Pa},setSeconds:function(){return Ha},setWeek:function(){return Ya},setWeekYear:function(){return Ua},setYear:function(){return Ra},startOfDay:function(){return _},startOfDecade:function(){return Fa},startOfHour:function(){return Jr},startOfISOWeek:function(){return v},startOfISOWeekYear:function(){return b},startOfMinute:function(){return xe},startOfMonth:function(){return Ae},startOfQuarter:function(){return Se},startOfSecond:function(){return io},startOfToday:function(){return Wa},startOfTomorrow:function(){return Ba},startOfWeek:function(){return g},startOfWeekYear:function(){return In},startOfYear:function(){return Ie},startOfYesterday:function(){return za},sub:function(){return Qn},subBusinessDays:function(){return Qa},subDays:function(){return Bn},subHours:function(){return Xa},subISOWeekYears:function(){return de},subMilliseconds:function(){return rt},subMinutes:function(){return Ga},subMonths:function(){return zn},subQuarters:function(){return Za},subSeconds:function(){return Ka},subWeeks:function(){return Va},subYears:function(){return Ja},toDate:function(){return a},weeksToDays:function(){return $a},yearsToMonths:function(){return ei},yearsToQuarters:function(){return ti}});var m=36e5;function p(e,t){o(2,arguments);var n=r(t);return h(e,n*m)}function g(e,t){o(1,arguments);var n=t||{},i=n.locale,s=i&&i.options&&i.options.weekStartsOn,u=null==s?0:r(s),c=null==n.weekStartsOn?u:r(n.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=a(e),f=l.getDay(),d=(f<c?7:0)+f-c;return l.setDate(l.getDate()-d),l.setHours(0,0,0,0),l}function v(e){return o(1,arguments),g(e,{weekStartsOn:1})}function y(e){o(1,arguments);var t=a(e),n=t.getFullYear(),r=new Date(0);r.setFullYear(n+1,0,4),r.setHours(0,0,0,0);var i=v(r),s=new Date(0);s.setFullYear(n,0,4),s.setHours(0,0,0,0);var u=v(s);return t.getTime()>=i.getTime()?n+1:t.getTime()>=u.getTime()?n:n-1}function b(e){o(1,arguments);var t=y(e),n=new Date(0);n.setFullYear(t,0,4),n.setHours(0,0,0,0);var r=v(n);return r}function w(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}function _(e){o(1,arguments);var t=a(e);return t.setHours(0,0,0,0),t}var k=864e5;function T(e,t){o(2,arguments);var n=_(e),r=_(t),a=n.getTime()-w(n),i=r.getTime()-w(r);return Math.round((a-i)/k)}function E(e,t){o(2,arguments);var n=a(e),i=r(t),s=T(n,b(n)),u=new Date(0);return u.setFullYear(i,0,4),u.setHours(0,0,0,0),(n=b(u)).setDate(n.getDate()+s),n}function x(e,t){o(2,arguments);var n=r(t);return E(e,y(e)+n)}function D(e,t){o(2,arguments);var n=r(t);return h(e,6e4*n)}function L(e,t){o(2,arguments);var n=r(t),a=3*n;return s(e,a)}function S(e,t){o(2,arguments);var n=r(t);return h(e,1e3*n)}function M(e,t){o(2,arguments);var n=r(t),a=7*n;return i(e,a)}function C(e,t){o(2,arguments);var n=r(t);return s(e,12*n)}function O(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{inclusive:!1};o(2,arguments);var r=e||{},i=t||{},s=a(r.start).getTime(),u=a(r.end).getTime(),c=a(i.start).getTime(),l=a(i.end).getTime();if(!(s<=u&&c<=l))throw new RangeError("Invalid interval");return n.inclusive?s<=l&&c<=u:s<l&&c<u}function A(e,t){o(2,arguments);var n=a(e);if(isNaN(n))return NaN;var r,i,s=n.getTime();return(null==t?[]:"function"==typeof t.forEach?t:Array.prototype.slice.call(t)).forEach((function(e,t){var n=a(e);if(isNaN(n))return r=NaN,void(i=NaN);var o=Math.abs(s-n.getTime());(null==r||o<i)&&(r=t,i=o)})),r}function N(e,t){o(2,arguments);var n=a(e);if(isNaN(n))return new Date(NaN);var r,i,s=n.getTime();return(null==t?[]:"function"==typeof t.forEach?t:Array.prototype.slice.call(t)).forEach((function(e){var t=a(e);if(isNaN(t))return r=new Date(NaN),void(i=NaN);var n=Math.abs(s-t.getTime());(null==r||n<i)&&(r=t,i=n)})),r}function I(e,t){o(2,arguments);var n=a(e),r=a(t),i=n.getTime()-r.getTime();return i<0?-1:i>0?1:i}function j(e,t){o(2,arguments);var n=a(e),r=a(t),i=n.getTime()-r.getTime();return i>0?-1:i<0?1:i}var q=7,P=24*Math.pow(10,8)*60*60*1e3,H=6e4,Y=36e5,U=1e3,R=-P,F=60,W=3,B=12,z=4,Q=3600,X=60;function G(e){o(1,arguments);var t=e/q;return Math.floor(t)}function Z(e){o(1,arguments);var t=a(e);return!isNaN(t)}function K(e,t){o(2,arguments);var n=_(e),r=_(t);return n.getTime()===r.getTime()}function V(e,t){o(2,arguments);var n=a(e),s=a(t);if(!Z(n)||!Z(s))return NaN;var u=T(n,s),l=u<0?-1:1,f=r(u/7),d=5*f;for(s=i(s,7*f);!K(n,s);)d+=c(s)?0:l,s=i(s,l);return 0===d?0:d}function J(e,t){return o(2,arguments),y(e)-y(t)}var $=6048e5;function ee(e,t){o(2,arguments);var n=v(e),r=v(t),a=n.getTime()-w(n),i=r.getTime()-w(r);return Math.round((a-i)/$)}function te(e,t){o(2,arguments);var n=a(e),r=a(t),i=n.getFullYear()-r.getFullYear(),s=n.getMonth()-r.getMonth();return 12*i+s}function ne(e){o(1,arguments);var t=a(e),n=Math.floor(t.getMonth()/3)+1;return n}function re(e,t){o(2,arguments);var n=a(e),r=a(t),i=n.getFullYear()-r.getFullYear(),s=ne(n)-ne(r);return 4*i+s}var oe=6048e5;function ae(e,t,n){o(2,arguments);var r=g(e,n),a=g(t,n),i=r.getTime()-w(r),s=a.getTime()-w(a);return Math.round((i-s)/oe)}function ie(e,t){o(2,arguments);var n=a(e),r=a(t);return n.getFullYear()-r.getFullYear()}function se(e,t){var n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}function ue(e,t){o(2,arguments);var n=a(e),r=a(t),i=se(n,r),s=Math.abs(T(n,r));n.setDate(n.getDate()-i*s);var u=Number(se(n,r)===-i),c=i*(s-u);return 0===c?0:c}function ce(e,t){o(2,arguments);var n=a(e),r=a(t);return n.getTime()-r.getTime()}var le=36e5;function fe(e,t){o(2,arguments);var n=ce(e,t)/le;return n>0?Math.floor(n):Math.ceil(n)}function de(e,t){o(2,arguments);var n=r(t);return x(e,-n)}function he(e,t){o(2,arguments);var n=a(e),r=a(t),i=I(n,r),s=Math.abs(J(n,r));n=de(n,i*s);var u=Number(I(n,r)===-i),c=i*(s-u);return 0===c?0:c}function me(e,t){o(2,arguments);var n=ce(e,t)/6e4;return n>0?Math.floor(n):Math.ceil(n)}function pe(e){o(1,arguments);var t=a(e);return t.setHours(23,59,59,999),t}function ge(e){o(1,arguments);var t=a(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(23,59,59,999),t}function ve(e){o(1,arguments);var t=a(e);return pe(t).getTime()===ge(t).getTime()}function ye(e,t){o(2,arguments);var n,r=a(e),i=a(t),s=I(r,i),u=Math.abs(te(r,i));if(u<1)n=0;else{1===r.getMonth()&&r.getDate()>27&&r.setDate(30),r.setMonth(r.getMonth()-s*u);var c=I(r,i)===-s;ve(a(e))&&1===u&&1===I(e,i)&&(c=!1),n=s*(u-Number(c))}return 0===n?0:n}function be(e,t){o(2,arguments);var n=ye(e,t)/3;return n>0?Math.floor(n):Math.ceil(n)}function we(e,t){o(2,arguments);var n=ce(e,t)/1e3;return n>0?Math.floor(n):Math.ceil(n)}function _e(e,t){o(2,arguments);var n=ue(e,t)/7;return n>0?Math.floor(n):Math.ceil(n)}function ke(e,t){o(2,arguments);var n=a(e),r=a(t),i=I(n,r),s=Math.abs(ie(n,r));n.setFullYear(1584),r.setFullYear(1584);var u=I(n,r)===-i,c=i*(s-Number(u));return 0===c?0:c}function Te(e,t){o(1,arguments);var n=e||{},r=a(n.start),i=a(n.end),s=i.getTime();if(!(r.getTime()<=s))throw new RangeError("Invalid interval");var u=[],c=r;c.setHours(0,0,0,0);var l=t&&"step"in t?Number(t.step):1;if(l<1||isNaN(l))throw new RangeError("`options.step` must be a number greater than 1");for(;c.getTime()<=s;)u.push(a(c)),c.setDate(c.getDate()+l),c.setHours(0,0,0,0);return u}function Ee(e,t){o(1,arguments);var n=e||{},r=a(n.start),i=a(n.end),s=r.getTime(),u=i.getTime();if(!(s<=u))throw new RangeError("Invalid interval");var c=[],l=r;l.setMinutes(0,0,0);var f=t&&"step"in t?Number(t.step):1;if(f<1||isNaN(f))throw new RangeError("`options.step` must be a number greater than 1");for(;l.getTime()<=u;)c.push(a(l)),l=p(l,f);return c}function xe(e){o(1,arguments);var t=a(e);return t.setSeconds(0,0),t}function De(e,t){o(1,arguments);var n=xe(a(e.start)),r=xe(a(e.end)),i=n.getTime(),s=r.getTime();if(i>=s)throw new RangeError("Invalid interval");var u=[],c=n,l=t&&"step"in t?Number(t.step):1;if(l<1||isNaN(l))throw new RangeError("`options.step` must be a number equal or greater than 1");for(;c.getTime()<=s;)u.push(a(c)),c=D(c,l);return u}function Le(e){o(1,arguments);var t=e||{},n=a(t.start),r=a(t.end),i=r.getTime(),s=[];if(!(n.getTime()<=i))throw new RangeError("Invalid interval");var u=n;for(u.setHours(0,0,0,0),u.setDate(1);u.getTime()<=i;)s.push(a(u)),u.setMonth(u.getMonth()+1);return s}function Se(e){o(1,arguments);var t=a(e),n=t.getMonth(),r=n-n%3;return t.setMonth(r,1),t.setHours(0,0,0,0),t}function Me(e){o(1,arguments);var t=e||{},n=a(t.start),r=a(t.end),i=r.getTime();if(!(n.getTime()<=i))throw new RangeError("Invalid interval");var s=Se(n),u=Se(r);i=u.getTime();for(var c=[],l=s;l.getTime()<=i;)c.push(a(l)),l=L(l,1);return c}function Ce(e,t){o(1,arguments);var n=e||{},r=a(n.start),i=a(n.end),s=i.getTime();if(!(r.getTime()<=s))throw new RangeError("Invalid interval");var u=g(r,t),c=g(i,t);u.setHours(15),c.setHours(15),s=c.getTime();for(var l=[],f=u;f.getTime()<=s;)f.setHours(0),l.push(a(f)),(f=M(f,1)).setHours(15);return l}function Oe(e){o(1,arguments);for(var t=Te(e),n=[],r=0;r<t.length;){var a=t[r++];c(a)&&(n.push(a),l(a)&&(r+=5))}return n}function Ae(e){o(1,arguments);var t=a(e);return t.setDate(1),t.setHours(0,0,0,0),t}function Ne(e){o(1,arguments);var t=Ae(e);if(isNaN(t.getTime()))throw new RangeError("The passed date is invalid");var n=ge(e);return Oe({start:t,end:n})}function Ie(e){o(1,arguments);var t=a(e),n=new Date(0);return n.setFullYear(t.getFullYear(),0,1),n.setHours(0,0,0,0),n}function je(e){o(1,arguments);var t=a(e),n=t.getFullYear();return t.setFullYear(n+1,0,0),t.setHours(23,59,59,999),t}function qe(e){o(1,arguments);var t=Ie(e);if(isNaN(t))throw new RangeError("The passed date is invalid");var n=je(e);return Oe({start:t,end:n})}function Pe(e){o(1,arguments);var t=e||{},n=a(t.start),r=a(t.end),i=r.getTime();if(!(n.getTime()<=i))throw new RangeError("Invalid interval");var s=[],u=n;for(u.setHours(0,0,0,0),u.setMonth(0,1);u.getTime()<=i;)s.push(a(u)),u.setFullYear(u.getFullYear()+1);return s}function He(e){o(1,arguments);var t=a(e),n=t.getFullYear(),r=9+10*Math.floor(n/10);return t.setFullYear(r,11,31),t.setHours(23,59,59,999),t}function Ye(e){o(1,arguments);var t=a(e);return t.setMinutes(59,59,999),t}function Ue(e,t){o(1,arguments);var n=t||{},i=n.locale,s=i&&i.options&&i.options.weekStartsOn,u=null==s?0:r(s),c=null==n.weekStartsOn?u:r(n.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=a(e),f=l.getDay(),d=6+(f<c?-7:0)-(f-c);return l.setDate(l.getDate()+d),l.setHours(23,59,59,999),l}function Re(e){return o(1,arguments),Ue(e,{weekStartsOn:1})}function Fe(e){o(1,arguments);var t=y(e),n=new Date(0);n.setFullYear(t+1,0,4),n.setHours(0,0,0,0);var r=v(n);return r.setMilliseconds(r.getMilliseconds()-1),r}function We(e){o(1,arguments);var t=a(e);return t.setSeconds(59,999),t}function Be(e){o(1,arguments);var t=a(e),n=t.getMonth(),r=n-n%3+3;return t.setMonth(r,0),t.setHours(23,59,59,999),t}function ze(e){o(1,arguments);var t=a(e);return t.setMilliseconds(999),t}function Qe(){return pe(Date.now())}function Xe(){var e=new Date,t=e.getFullYear(),n=e.getMonth(),r=e.getDate(),o=new Date(0);return o.setFullYear(t,n,r+1),o.setHours(23,59,59,999),o}function Ge(){var e=new Date,t=e.getFullYear(),n=e.getMonth(),r=e.getDate(),o=new Date(0);return o.setFullYear(t,n,r-1),o.setHours(23,59,59,999),o}var Ze={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Ke(e){return function(t){var n=t||{},r=n.width?String(n.width):e.defaultWidth;return e.formats[r]||e.formats[e.defaultWidth]}}var Ve={date:Ke({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Ke({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Ke({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},Je={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function $e(e){return function(t,n){var r,o=n||{};if("formatting"===(o.context?String(o.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,i=o.width?String(o.width):a;r=e.formattingValues[i]||e.formattingValues[a]}else{var s=e.defaultWidth,u=o.width?String(o.width):e.defaultWidth;r=e.values[u]||e.values[s]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function et(e){return function(t,n){var r=String(t),o=n||{},a=o.width,i=a&&e.matchPatterns[a]||e.matchPatterns[e.defaultMatchWidth],s=r.match(i);if(!s)return null;var u,c=s[0],l=a&&e.parsePatterns[a]||e.parsePatterns[e.defaultParseWidth];return u="[object Array]"===Object.prototype.toString.call(l)?function(e,t){for(var n=0;n<e.length;n++)if(t(e[n]))return n}(l,(function(e){return e.test(c)})):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&t(e[n]))return n}(l,(function(e){return e.test(c)})),u=e.valueCallback?e.valueCallback(u):u,{value:u=o.valueCallback?o.valueCallback(u):u,rest:r.slice(c.length)}}}var tt,nt={code:"en-US",formatDistance:function(e,t,n){var r;return n=n||{},r="string"==typeof Ze[e]?Ze[e]:1===t?Ze[e].one:Ze[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:Ve,formatRelative:function(e,t,n,r){return Je[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:$e({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:$e({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:$e({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:$e({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:$e({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(tt={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),r=t||{},o=n.match(tt.matchPattern);if(!o)return null;var a=o[0],i=n.match(tt.parsePattern);if(!i)return null;var s=tt.valueCallback?tt.valueCallback(i[0]):i[0];return{value:s=r.valueCallback?r.valueCallback(s):s,rest:n.slice(a.length)}}),era:et({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:et({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:et({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:et({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:et({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function rt(e,t){o(2,arguments);var n=r(t);return h(e,-n)}function ot(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}var at={y:function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return ot("yy"===t?r%100:r,t.length)},M:function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):ot(n+1,2)},d:function(e,t){return ot(e.getUTCDate(),t.length)},a:function(e,t){var n=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];case"aaaa":default:return"am"===n?"a.m.":"p.m."}},h:function(e,t){return ot(e.getUTCHours()%12||12,t.length)},H:function(e,t){return ot(e.getUTCHours(),t.length)},m:function(e,t){return ot(e.getUTCMinutes(),t.length)},s:function(e,t){return ot(e.getUTCSeconds(),t.length)},S:function(e,t){var n=t.length,r=e.getUTCMilliseconds();return ot(Math.floor(r*Math.pow(10,n-3)),t.length)}},it=864e5;function st(e){o(1,arguments);var t=1,n=a(e),r=n.getUTCDay(),i=(r<t?7:0)+r-t;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function ut(e){o(1,arguments);var t=a(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var i=st(r),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var u=st(s);return t.getTime()>=i.getTime()?n+1:t.getTime()>=u.getTime()?n:n-1}function ct(e){o(1,arguments);var t=ut(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var r=st(n);return r}var lt=6048e5;function ft(e){o(1,arguments);var t=a(e),n=st(t).getTime()-ct(t).getTime();return Math.round(n/lt)+1}function dt(e,t){o(1,arguments);var n=t||{},i=n.locale,s=i&&i.options&&i.options.weekStartsOn,u=null==s?0:r(s),c=null==n.weekStartsOn?u:r(n.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=a(e),f=l.getUTCDay(),d=(f<c?7:0)+f-c;return l.setUTCDate(l.getUTCDate()-d),l.setUTCHours(0,0,0,0),l}function ht(e,t){o(1,arguments);var n=a(e,t),i=n.getUTCFullYear(),s=t||{},u=s.locale,c=u&&u.options&&u.options.firstWeekContainsDate,l=null==c?1:r(c),f=null==s.firstWeekContainsDate?l:r(s.firstWeekContainsDate);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setUTCFullYear(i+1,0,f),d.setUTCHours(0,0,0,0);var h=dt(d,t),m=new Date(0);m.setUTCFullYear(i,0,f),m.setUTCHours(0,0,0,0);var p=dt(m,t);return n.getTime()>=h.getTime()?i+1:n.getTime()>=p.getTime()?i:i-1}function mt(e,t){o(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.firstWeekContainsDate,s=null==i?1:r(i),u=null==n.firstWeekContainsDate?s:r(n.firstWeekContainsDate),c=ht(e,t),l=new Date(0);l.setUTCFullYear(c,0,u),l.setUTCHours(0,0,0,0);var f=dt(l,t);return f}var pt=6048e5;function gt(e,t){o(1,arguments);var n=a(e),r=dt(n,t).getTime()-mt(n,t).getTime();return Math.round(r/pt)+1}var vt="midnight",yt="noon",bt="morning",wt="afternoon",_t="evening",kt="night";function Tt(e,t){var n=e>0?"-":"+",r=Math.abs(e),o=Math.floor(r/60),a=r%60;if(0===a)return n+String(o);var i=t||"";return n+String(o)+i+ot(a,2)}function Et(e,t){return e%60==0?(e>0?"-":"+")+ot(Math.abs(e)/60,2):xt(e,t)}function xt(e,t){var n=t||"",r=e>0?"-":"+",o=Math.abs(e);return r+ot(Math.floor(o/60),2)+n+ot(o%60,2)}var Dt={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),o=r>0?r:1-r;return n.ordinalNumber(o,{unit:"year"})}return at.y(e,t)},Y:function(e,t,n,r){var o=ht(e,r),a=o>0?o:1-o;return"YY"===t?ot(a%100,2):"Yo"===t?n.ordinalNumber(a,{unit:"year"}):ot(a,t.length)},R:function(e,t){return ot(ut(e),t.length)},u:function(e,t){return ot(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return ot(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return ot(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return at.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return ot(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var o=gt(e,r);return"wo"===t?n.ordinalNumber(o,{unit:"week"}):ot(o,t.length)},I:function(e,t,n){var r=ft(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):ot(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):at.d(e,t)},D:function(e,t,n){var r=function(e){o(1,arguments);var t=a(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),i=n-r;return Math.floor(i/it)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):ot(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return ot(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(o,{width:"short",context:"formatting"});case"eeee":default:return n.day(o,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var o=e.getUTCDay(),a=(o-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return ot(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(o,{width:"narrow",context:"standalone"});case"cccccc":return n.day(o,{width:"short",context:"standalone"});case"cccc":default:return n.day(o,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),o=0===r?7:r;switch(t){case"i":return String(o);case"ii":return ot(o,t.length);case"io":return n.ordinalNumber(o,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,o=e.getUTCHours();switch(r=12===o?yt:0===o?vt:o/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,o=e.getUTCHours();switch(r=o>=17?_t:o>=12?wt:o>=4?bt:kt,t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return at.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):at.H(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):ot(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):ot(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):at.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):at.s(e,t)},S:function(e,t){return at.S(e,t)},X:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();if(0===o)return"Z";switch(t){case"X":return Et(o);case"XXXX":case"XX":return xt(o);case"XXXXX":case"XXX":default:return xt(o,":")}},x:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return Et(o);case"xxxx":case"xx":return xt(o);case"xxxxx":case"xxx":default:return xt(o,":")}},O:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+Tt(o,":");case"OOOO":default:return"GMT"+xt(o,":")}},z:function(e,t,n,r){var o=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+Tt(o,":");case"zzzz":default:return"GMT"+xt(o,":")}},t:function(e,t,n,r){var o=r._originalDate||e;return ot(Math.floor(o.getTime()/1e3),t.length)},T:function(e,t,n,r){return ot((r._originalDate||e).getTime(),t.length)}};function Lt(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function St(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}var Mt={p:St,P:function(e,t){var n,r=e.match(/(P+)(p+)?/),o=r[1],a=r[2];if(!a)return Lt(e,t);switch(o){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",Lt(o,t)).replace("{{time}}",St(a,t))}},Ct=["D","DD"],Ot=["YY","YYYY"];function At(e){return-1!==Ct.indexOf(e)}function Nt(e){return-1!==Ot.indexOf(e)}function It(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var jt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,qt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Pt=/^'([^]*?)'?$/,Ht=/''/g,Yt=/[a-zA-Z]/;function Ut(e,t,n){o(2,arguments);var i=String(t),s=n||{},u=s.locale||nt,c=u.options&&u.options.firstWeekContainsDate,l=null==c?1:r(c),f=null==s.firstWeekContainsDate?l:r(s.firstWeekContainsDate);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=u.options&&u.options.weekStartsOn,h=null==d?0:r(d),m=null==s.weekStartsOn?h:r(s.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!u.localize)throw new RangeError("locale must contain localize property");if(!u.formatLong)throw new RangeError("locale must contain formatLong property");var p=a(e);if(!Z(p))throw new RangeError("Invalid time value");var g=w(p),v=rt(p,g),y={firstWeekContainsDate:f,weekStartsOn:m,locale:u,_originalDate:p},b=i.match(qt).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Mt[t])(e,u.formatLong,y):e})).join("").match(jt).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return Rt(n);var o=Dt[r];if(o)return!s.useAdditionalWeekYearTokens&&Nt(n)&&It(n,t,e),!s.useAdditionalDayOfYearTokens&&At(n)&&It(n,t,e),o(v,n,u.localize,y);if(r.match(Yt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return b}function Rt(e){return e.match(Pt)[1].replace(Ht,"'")}function Ft(e,t){if(null==e)throw new TypeError("assign requires that input parameter not be null or undefined");for(var n in t=t||{})t.hasOwnProperty(n)&&(e[n]=t[n]);return e}function Wt(e){return Ft({},e)}var Bt=1440,zt=43200;function Qt(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};o(2,arguments);var r=n.locale||nt;if(!r.formatDistance)throw new RangeError("locale must contain formatDistance property");var i=I(e,t);if(isNaN(i))throw new RangeError("Invalid time value");var s,u,c=Wt(n);c.addSuffix=Boolean(n.addSuffix),c.comparison=i,i>0?(s=a(t),u=a(e)):(s=a(e),u=a(t));var l,f=we(u,s),d=(w(u)-w(s))/1e3,h=Math.round((f-d)/60);if(h<2)return n.includeSeconds?f<5?r.formatDistance("lessThanXSeconds",5,c):f<10?r.formatDistance("lessThanXSeconds",10,c):f<20?r.formatDistance("lessThanXSeconds",20,c):f<40?r.formatDistance("halfAMinute",null,c):f<60?r.formatDistance("lessThanXMinutes",1,c):r.formatDistance("xMinutes",1,c):0===h?r.formatDistance("lessThanXMinutes",1,c):r.formatDistance("xMinutes",h,c);if(h<45)return r.formatDistance("xMinutes",h,c);if(h<90)return r.formatDistance("aboutXHours",1,c);if(h<Bt){var m=Math.round(h/60);return r.formatDistance("aboutXHours",m,c)}if(h<2520)return r.formatDistance("xDays",1,c);if(h<zt){var p=Math.round(h/Bt);return r.formatDistance("xDays",p,c)}if(h<86400)return l=Math.round(h/zt),r.formatDistance("aboutXMonths",l,c);if((l=ye(u,s))<12){var g=Math.round(h/zt);return r.formatDistance("xMonths",g,c)}var v=l%12,y=Math.floor(l/12);return v<3?r.formatDistance("aboutXYears",y,c):v<9?r.formatDistance("overXYears",y,c):r.formatDistance("almostXYears",y+1,c)}var Xt=6e4,Gt=1440,Zt=43200,Kt=525600;function Vt(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};o(2,arguments);var r=n.locale||nt;if(!r.formatDistance)throw new RangeError("locale must contain localize.formatDistance property");var i=I(e,t);if(isNaN(i))throw new RangeError("Invalid time value");var s,u,c=Wt(n);c.addSuffix=Boolean(n.addSuffix),c.comparison=i,i>0?(s=a(t),u=a(e)):(s=a(e),u=a(t));var l,f=null==n.roundingMethod?"round":String(n.roundingMethod);if("floor"===f)l=Math.floor;else if("ceil"===f)l=Math.ceil;else{if("round"!==f)throw new RangeError("roundingMethod must be 'floor', 'ceil' or 'round'");l=Math.round}var d,h=u.getTime()-s.getTime(),m=h/Xt,p=w(u)-w(s),g=(h-p)/Xt;if("second"===(d=null==n.unit?m<1?"second":m<60?"minute":m<Gt?"hour":g<Zt?"day":g<Kt?"month":"year":String(n.unit))){var v=l(h/1e3);return r.formatDistance("xSeconds",v,c)}if("minute"===d){var y=l(m);return r.formatDistance("xMinutes",y,c)}if("hour"===d){var b=l(m/60);return r.formatDistance("xHours",b,c)}if("day"===d){var _=l(g/Gt);return r.formatDistance("xDays",_,c)}if("month"===d){var k=l(g/Zt);return 12===k&&"month"!==n.unit?r.formatDistance("xYears",1,c):r.formatDistance("xMonths",k,c)}if("year"===d){var T=l(g/Kt);return r.formatDistance("xYears",T,c)}throw new RangeError("unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'")}function Jt(e,t){return o(1,arguments),Qt(e,Date.now(),t)}function $t(e,t){return o(1,arguments),Vt(e,Date.now(),t)}var en=["years","months","weeks","days","hours","minutes","seconds"];function tn(e,t){if(arguments.length<1)throw new TypeError("1 argument required, but only ".concat(arguments.length," present"));var n=(null==t?void 0:t.format)||en,r=(null==t?void 0:t.locale)||nt,o=(null==t?void 0:t.zero)||!1,a=(null==t?void 0:t.delimiter)||" ",i=n.reduce((function(t,n){var a="x".concat(n.replace(/(^.)/,(function(e){return e.toUpperCase()})));return"number"==typeof e[n]&&(o||e[n])?t.concat(r.formatDistance(a,e[n])):t}),[]).join(a);return i}function nn(e,t){if(arguments.length<1)throw new TypeError("1 argument required, but only ".concat(arguments.length," present"));var n=a(e);if(!Z(n))throw new RangeError("Invalid time value");var r=t||{},o=null==r.format?"extended":String(r.format),i=null==r.representation?"complete":String(r.representation);if("extended"!==o&&"basic"!==o)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==i&&"time"!==i&&"complete"!==i)throw new RangeError("representation must be 'date', 'time', or 'complete'");var s="",u="",c="extended"===o?"-":"",l="extended"===o?":":"";if("time"!==i){var f=ot(n.getDate(),2),d=ot(n.getMonth()+1,2),h=ot(n.getFullYear(),4);s="".concat(h).concat(c).concat(d).concat(c).concat(f)}if("date"!==i){var m=n.getTimezoneOffset();if(0!==m){var p=Math.abs(m),g=ot(Math.floor(p/60),2),v=ot(p%60,2),y=m<0?"+":"-";u="".concat(y).concat(g,":").concat(v)}else u="Z";var b=ot(n.getHours(),2),w=ot(n.getMinutes(),2),_=ot(n.getSeconds(),2),k=""===s?"":"T",T=[b,w,_].join(l);s="".concat(s).concat(k).concat(T).concat(u)}return s}function rn(e,t){if(arguments.length<1)throw new TypeError("1 argument required, but only ".concat(arguments.length," present"));var n=a(e);if(!Z(n))throw new RangeError("Invalid time value");var r=t||{},o=null==r.format?"extended":String(r.format),i=null==r.representation?"complete":String(r.representation);if("extended"!==o&&"basic"!==o)throw new RangeError("format must be 'extended' or 'basic'");if("date"!==i&&"time"!==i&&"complete"!==i)throw new RangeError("representation must be 'date', 'time', or 'complete'");var s="",u="extended"===o?"-":"",c="extended"===o?":":"";if("time"!==i){var l=ot(n.getDate(),2),f=ot(n.getMonth()+1,2),d=ot(n.getFullYear(),4);s="".concat(d).concat(u).concat(f).concat(u).concat(l)}if("date"!==i){var h=ot(n.getHours(),2),m=ot(n.getMinutes(),2),p=ot(n.getSeconds(),2),g=""===s?"":" ";s="".concat(s).concat(g).concat(h).concat(c).concat(m).concat(c).concat(p)}return s}function on(e){if(o(1,arguments),"object"!=typeof e)throw new Error("Duration must be an object");var t=e.years,n=void 0===t?0:t,r=e.months,a=void 0===r?0:r,i=e.days,s=void 0===i?0:i,u=e.hours,c=void 0===u?0:u,l=e.minutes,f=void 0===l?0:l,d=e.seconds,h=void 0===d?0:d;return"P".concat(n,"Y").concat(a,"M").concat(s,"DT").concat(c,"H").concat(f,"M").concat(h,"S")}function an(e,t){if(arguments.length<1)throw new TypeError("1 arguments required, but only ".concat(arguments.length," present"));var n=a(e);if(!Z(n))throw new RangeError("Invalid time value");var o=t||{},i=null==o.fractionDigits?0:r(o.fractionDigits);if(!(i>=0&&i<=3))throw new RangeError("fractionDigits must be between 0 and 3 inclusively");var s=ot(n.getDate(),2),u=ot(n.getMonth()+1,2),c=n.getFullYear(),l=ot(n.getHours(),2),f=ot(n.getMinutes(),2),d=ot(n.getSeconds(),2),h="";if(i>0){var m=n.getMilliseconds(),p=Math.floor(m*Math.pow(10,i-3));h="."+ot(p,i)}var g="",v=n.getTimezoneOffset();if(0!==v){var y=Math.abs(v),b=ot(r(y/60),2),w=ot(y%60,2),_=v<0?"+":"-";g="".concat(_).concat(b,":").concat(w)}else g="Z";return"".concat(c,"-").concat(u,"-").concat(s,"T").concat(l,":").concat(f,":").concat(d).concat(h).concat(g)}var sn=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],un=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function cn(e){if(arguments.length<1)throw new TypeError("1 arguments required, but only ".concat(arguments.length," present"));var t=a(e);if(!Z(t))throw new RangeError("Invalid time value");var n=sn[t.getUTCDay()],r=ot(t.getUTCDate(),2),o=un[t.getUTCMonth()],i=t.getUTCFullYear(),s=ot(t.getUTCHours(),2),u=ot(t.getUTCMinutes(),2),c=ot(t.getUTCSeconds(),2);return"".concat(n,", ").concat(r," ").concat(o," ").concat(i," ").concat(s,":").concat(u,":").concat(c," GMT")}function ln(e,t,n){o(2,arguments);var r=a(e),i=a(t),s=n||{},u=s.locale,c=void 0===u?nt:u,l=s.weekStartsOn,f=void 0===l?0:l;if(!c.localize)throw new RangeError("locale must contain localize property");if(!c.formatLong)throw new RangeError("locale must contain formatLong property");if(!c.formatRelative)throw new RangeError("locale must contain formatRelative property");var d,h=T(r,i);if(isNaN(h))throw new RangeError("Invalid time value");d=h<-6?"other":h<-1?"lastWeek":h<0?"yesterday":h<1?"today":h<2?"tomorrow":h<7?"nextWeek":"other";var m=rt(r,w(r)),p=rt(i,w(i)),g=c.formatRelative(d,m,p,{locale:c,weekStartsOn:f});return Ut(r,g,{locale:c,weekStartsOn:f})}function fn(e){o(1,arguments);var t=r(e);return a(1e3*t)}function dn(e){o(1,arguments);var t=a(e),n=t.getDate();return n}function hn(e){o(1,arguments);var t=a(e),n=t.getDay();return n}function mn(e){o(1,arguments);var t=a(e),n=T(t,Ie(t)),r=n+1;return r}function pn(e){o(1,arguments);var t=a(e),n=t.getFullYear(),r=t.getMonth(),i=new Date(0);return i.setFullYear(n,r+1,0),i.setHours(0,0,0,0),i.getDate()}function gn(e){o(1,arguments);var t=a(e),n=t.getFullYear();return n%400==0||n%4==0&&n%100!=0}function vn(e){o(1,arguments);var t=a(e);return"Invalid Date"===String(new Date(t))?NaN:gn(t)?366:365}function yn(e){o(1,arguments);var t=a(e),n=t.getFullYear(),r=10*Math.floor(n/10);return r}function bn(e){o(1,arguments);var t=a(e),n=t.getHours();return n}function wn(e){o(1,arguments);var t=a(e),n=t.getDay();return 0===n&&(n=7),n}var _n=6048e5;function kn(e){o(1,arguments);var t=a(e),n=v(t).getTime()-b(t).getTime();return Math.round(n/_n)+1}var Tn=6048e5;function En(e){o(1,arguments);var t=b(e),n=b(M(t,60)),r=n.valueOf()-t.valueOf();return Math.round(r/Tn)}function xn(e){o(1,arguments);var t=a(e),n=t.getMilliseconds();return n}function Dn(e){o(1,arguments);var t=a(e),n=t.getMinutes();return n}function Ln(e){o(1,arguments);var t=a(e),n=t.getMonth();return n}var Sn=864e5;function Mn(e,t){o(2,arguments);var n=e||{},r=t||{},i=a(n.start).getTime(),s=a(n.end).getTime(),u=a(r.start).getTime(),c=a(r.end).getTime();if(!(i<=s&&u<=c))throw new RangeError("Invalid interval");var l=i<c&&u<s;if(!l)return 0;var f=u<i?i:u,d=c>s?s:c,h=d-f;return Math.ceil(h/Sn)}function Cn(e){o(1,arguments);var t=a(e),n=t.getSeconds();return n}function On(e){o(1,arguments);var t=a(e),n=t.getTime();return n}function An(e){return o(1,arguments),Math.floor(On(e)/1e3)}function Nn(e,t){var n,i;o(1,arguments);var s=a(e),u=s.getFullYear(),c=null==t||null===(n=t.locale)||void 0===n||null===(i=n.options)||void 0===i?void 0:i.firstWeekContainsDate,l=null==c?1:r(c),f=null==(null==t?void 0:t.firstWeekContainsDate)?l:r(t.firstWeekContainsDate);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var d=new Date(0);d.setFullYear(u+1,0,f),d.setHours(0,0,0,0);var h=g(d,t),m=new Date(0);m.setFullYear(u,0,f),m.setHours(0,0,0,0);var p=g(m,t);return s.getTime()>=h.getTime()?u+1:s.getTime()>=p.getTime()?u:u-1}function In(e,t){o(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.firstWeekContainsDate,s=null==i?1:r(i),u=null==n.firstWeekContainsDate?s:r(n.firstWeekContainsDate),c=Nn(e,t),l=new Date(0);l.setFullYear(c,0,u),l.setHours(0,0,0,0);var f=g(l,t);return f}var jn=6048e5;function qn(e,t){o(1,arguments);var n=a(e),r=g(n,t).getTime()-In(n,t).getTime();return Math.round(r/jn)+1}function Pn(e,t){o(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.weekStartsOn,s=null==i?0:r(i),u=null==n.weekStartsOn?s:r(n.weekStartsOn);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var c=dn(e);if(isNaN(c))return c;var l=hn(Ae(e)),f=0,d=1;if(c>(f=l>=u?u+7-l:u-l)){var h=c-f;d+=Math.ceil(h/7)}return d}function Hn(e){o(1,arguments);var t=a(e),n=t.getMonth();return t.setFullYear(t.getFullYear(),n+1,0),t.setHours(0,0,0,0),t}function Yn(e,t){return o(1,arguments),ae(Hn(e),Ae(e),t)+1}function Un(e){o(1,arguments);var t=a(e),n=t.getFullYear();return n}function Rn(e){return o(1,arguments),Math.floor(e*Y)}function Fn(e){return o(1,arguments),Math.floor(e*F)}function Wn(e){return o(1,arguments),Math.floor(e*Q)}function Bn(e,t){o(2,arguments);var n=r(t);return i(e,-n)}function zn(e,t){o(2,arguments);var n=r(t);return s(e,-n)}function Qn(e,t){if(o(2,arguments),!t||"object"!=typeof t)return new Date(NaN);var n="years"in t?r(t.years):0,i="months"in t?r(t.months):0,s="weeks"in t?r(t.weeks):0,u="days"in t?r(t.days):0,c="hours"in t?r(t.hours):0,l="minutes"in t?r(t.minutes):0,f="seconds"in t?r(t.seconds):0,d=zn(a(e),i+12*n),h=Bn(d,u+7*s),m=l+60*c,p=f+60*m,g=1e3*p,v=new Date(h.getTime()-g);return v}function Xn(e){var t=e.start,n=e.end;o(1,arguments);var r=a(t),i=a(n);if(!Z(r))throw new RangeError("Start Date is invalid");if(!Z(i))throw new RangeError("End Date is invalid");var s={years:0,months:0,days:0,hours:0,minutes:0,seconds:0},u=I(r,i);s.years=Math.abs(ke(r,i));var c=Qn(r,{years:u*s.years});s.months=Math.abs(ye(c,i));var l=Qn(c,{months:u*s.months});s.days=Math.abs(ue(l,i));var f=Qn(l,{days:u*s.days});s.hours=Math.abs(fe(f,i));var d=Qn(f,{hours:u*s.hours});s.minutes=Math.abs(me(d,i));var h=Qn(d,{minutes:u*s.minutes});return s.seconds=Math.abs(we(h,i)),s}function Gn(e,t,n){var r,a;return o(1,arguments),Zn(t)?a=t:n=t,new Intl.DateTimeFormat(null===(r=n)||void 0===r?void 0:r.locale,a).format(e)}function Zn(e){return void 0!==e&&!("locale"in e)}function Kn(e,t){o(2,arguments);var n=a(e),r=a(t);return n.getTime()>r.getTime()}function Vn(e,t){o(2,arguments);var n=a(e),r=a(t);return n.getTime()<r.getTime()}function Jn(e){return o(1,arguments),e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}function $n(e,t){o(2,arguments);var n=a(e),r=a(t);return n.getTime()===r.getTime()}function er(e,t,n){if(arguments.length<3)throw new TypeError("3 argument required, but only "+arguments.length+" present");var r=new Date(e,t,n);return r.getFullYear()===e&&r.getMonth()===t&&r.getDate()===n}function tr(e){return o(1,arguments),1===a(e).getDate()}function nr(e){return o(1,arguments),5===a(e).getDay()}function rr(e){return o(1,arguments),a(e).getTime()>Date.now()}function or(e,t,n){o(2,arguments);var i=n||{},s=i.locale,u=s&&s.options&&s.options.weekStartsOn,c=null==u?0:r(u),l=null==i.weekStartsOn?c:r(i.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=a(e),d=r(t),h=f.getUTCDay(),m=d%7,p=(m+7)%7,g=(p<l?7:0)+d-h;return f.setUTCDate(f.getUTCDate()+g),f}var ar=/^(1[0-2]|0?\d)/,ir=/^(3[0-1]|[0-2]?\d)/,sr=/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,ur=/^(5[0-3]|[0-4]?\d)/,cr=/^(2[0-3]|[0-1]?\d)/,lr=/^(2[0-4]|[0-1]?\d)/,fr=/^(1[0-1]|0?\d)/,dr=/^(1[0-2]|0?\d)/,hr=/^[0-5]?\d/,mr=/^[0-5]?\d/,pr=/^\d/,gr=/^\d{1,2}/,vr=/^\d{1,3}/,yr=/^\d{1,4}/,br=/^-?\d+/,wr=/^-?\d/,_r=/^-?\d{1,2}/,kr=/^-?\d{1,3}/,Tr=/^-?\d{1,4}/,Er=/^([+-])(\d{2})(\d{2})?|Z/,xr=/^([+-])(\d{2})(\d{2})|Z/,Dr=/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,Lr=/^([+-])(\d{2}):(\d{2})|Z/,Sr=/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/;function Mr(e,t,n){var r=t.match(e);if(!r)return null;var o=parseInt(r[0],10);return{value:n?n(o):o,rest:t.slice(r[0].length)}}function Cr(e,t){var n=t.match(e);return n?"Z"===n[0]?{value:0,rest:t.slice(1)}:{value:("+"===n[1]?1:-1)*(36e5*(n[2]?parseInt(n[2],10):0)+6e4*(n[3]?parseInt(n[3],10):0)+1e3*(n[5]?parseInt(n[5],10):0)),rest:t.slice(n[0].length)}:null}function Or(e,t){return Mr(br,e,t)}function Ar(e,t,n){switch(e){case 1:return Mr(pr,t,n);case 2:return Mr(gr,t,n);case 3:return Mr(vr,t,n);case 4:return Mr(yr,t,n);default:return Mr(new RegExp("^\\d{1,"+e+"}"),t,n)}}function Nr(e,t,n){switch(e){case 1:return Mr(wr,t,n);case 2:return Mr(_r,t,n);case 3:return Mr(kr,t,n);case 4:return Mr(Tr,t,n);default:return Mr(new RegExp("^-?\\d{1,"+e+"}"),t,n)}}function Ir(e){switch(e){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;case"am":case"midnight":case"night":default:return 0}}function jr(e,t){var n,r=t>0,o=r?t:1-t;if(o<=50)n=e||100;else{var a=o+50;n=e+100*Math.floor(a/100)-(e>=a%100?100:0)}return r?n:1-n}var qr=[31,28,31,30,31,30,31,31,30,31,30,31],Pr=[31,29,31,30,31,30,31,31,30,31,30,31];function Hr(e){return e%400==0||e%4==0&&e%100!=0}var Yr={G:{priority:140,parse:function(e,t,n,r){switch(t){case"G":case"GG":case"GGG":return n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"});case"GGGGG":return n.era(e,{width:"narrow"});case"GGGG":default:return n.era(e,{width:"wide"})||n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"})}},set:function(e,t,n,r){return t.era=n,e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["R","u","t","T"]},y:{priority:130,parse:function(e,t,n,r){var o=function(e){return{year:e,isTwoDigitYear:"yy"===t}};switch(t){case"y":return Ar(4,e,o);case"yo":return n.ordinalNumber(e,{unit:"year",valueCallback:o});default:return Ar(t.length,e,o)}},validate:function(e,t,n){return t.isTwoDigitYear||t.year>0},set:function(e,t,n,r){var o=e.getUTCFullYear();if(n.isTwoDigitYear){var a=jr(n.year,o);return e.setUTCFullYear(a,0,1),e.setUTCHours(0,0,0,0),e}var i="era"in t&&1!==t.era?1-n.year:n.year;return e.setUTCFullYear(i,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","u","w","I","i","e","c","t","T"]},Y:{priority:130,parse:function(e,t,n,r){var o=function(e){return{year:e,isTwoDigitYear:"YY"===t}};switch(t){case"Y":return Ar(4,e,o);case"Yo":return n.ordinalNumber(e,{unit:"year",valueCallback:o});default:return Ar(t.length,e,o)}},validate:function(e,t,n){return t.isTwoDigitYear||t.year>0},set:function(e,t,n,r){var o=ht(e,r);if(n.isTwoDigitYear){var a=jr(n.year,o);return e.setUTCFullYear(a,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),dt(e,r)}var i="era"in t&&1!==t.era?1-n.year:n.year;return e.setUTCFullYear(i,0,r.firstWeekContainsDate),e.setUTCHours(0,0,0,0),dt(e,r)},incompatibleTokens:["y","R","u","Q","q","M","L","I","d","D","i","t","T"]},R:{priority:130,parse:function(e,t,n,r){return Nr("R"===t?4:t.length,e)},set:function(e,t,n,r){var o=new Date(0);return o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0),st(o)},incompatibleTokens:["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]},u:{priority:130,parse:function(e,t,n,r){return Nr("u"===t?4:t.length,e)},set:function(e,t,n,r){return e.setUTCFullYear(n,0,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["G","y","Y","R","w","I","i","e","c","t","T"]},Q:{priority:120,parse:function(e,t,n,r){switch(t){case"Q":case"QQ":return Ar(t.length,e);case"Qo":return n.ordinalNumber(e,{unit:"quarter"});case"QQQ":return n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(e,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(e,{width:"wide",context:"formatting"})||n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=1&&t<=4},set:function(e,t,n,r){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]},q:{priority:120,parse:function(e,t,n,r){switch(t){case"q":case"qq":return Ar(t.length,e);case"qo":return n.ordinalNumber(e,{unit:"quarter"});case"qqq":return n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(e,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(e,{width:"wide",context:"standalone"})||n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=1&&t<=4},set:function(e,t,n,r){return e.setUTCMonth(3*(n-1),1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]},M:{priority:110,parse:function(e,t,n,r){var o=function(e){return e-1};switch(t){case"M":return Mr(ar,e,o);case"MM":return Ar(2,e,o);case"Mo":return n.ordinalNumber(e,{unit:"month",valueCallback:o});case"MMM":return n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(e,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(e,{width:"wide",context:"formatting"})||n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,r){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","L","w","I","D","i","e","c","t","T"]},L:{priority:110,parse:function(e,t,n,r){var o=function(e){return e-1};switch(t){case"L":return Mr(ar,e,o);case"LL":return Ar(2,e,o);case"Lo":return n.ordinalNumber(e,{unit:"month",valueCallback:o});case"LLL":return n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(e,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(e,{width:"wide",context:"standalone"})||n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,r){return e.setUTCMonth(n,1),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]},w:{priority:100,parse:function(e,t,n,r){switch(t){case"w":return Mr(ur,e);case"wo":return n.ordinalNumber(e,{unit:"week"});default:return Ar(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=53},set:function(e,t,n,i){return dt(function(e,t,n){o(2,arguments);var i=a(e),s=r(t),u=gt(i,n)-s;return i.setUTCDate(i.getUTCDate()-7*u),i}(e,n,i),i)},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","i","t","T"]},I:{priority:100,parse:function(e,t,n,r){switch(t){case"I":return Mr(ur,e);case"Io":return n.ordinalNumber(e,{unit:"week"});default:return Ar(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=53},set:function(e,t,n,i){return st(function(e,t){o(2,arguments);var n=a(e),i=r(t),s=ft(n)-i;return n.setUTCDate(n.getUTCDate()-7*s),n}(e,n,i),i)},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]},d:{priority:90,subPriority:1,parse:function(e,t,n,r){switch(t){case"d":return Mr(ir,e);case"do":return n.ordinalNumber(e,{unit:"date"});default:return Ar(t.length,e)}},validate:function(e,t,n){var r=Hr(e.getUTCFullYear()),o=e.getUTCMonth();return r?t>=1&&t<=Pr[o]:t>=1&&t<=qr[o]},set:function(e,t,n,r){return e.setUTCDate(n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","w","I","D","i","e","c","t","T"]},D:{priority:90,subPriority:1,parse:function(e,t,n,r){switch(t){case"D":case"DD":return Mr(sr,e);case"Do":return n.ordinalNumber(e,{unit:"date"});default:return Ar(t.length,e)}},validate:function(e,t,n){return Hr(e.getUTCFullYear())?t>=1&&t<=366:t>=1&&t<=365},set:function(e,t,n,r){return e.setUTCMonth(0,n),e.setUTCHours(0,0,0,0),e},incompatibleTokens:["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]},E:{priority:90,parse:function(e,t,n,r){switch(t){case"E":case"EE":case"EEE":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"EEEE":default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,r){return(e=or(e,n,r)).setUTCHours(0,0,0,0),e},incompatibleTokens:["D","i","e","c","t","T"]},e:{priority:90,parse:function(e,t,n,r){var o=function(e){var t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"e":case"ee":return Ar(t.length,e,o);case"eo":return n.ordinalNumber(e,{unit:"day",valueCallback:o});case"eee":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"eeeee":return n.day(e,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"eeee":default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,r){return(e=or(e,n,r)).setUTCHours(0,0,0,0),e},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]},c:{priority:90,parse:function(e,t,n,r){var o=function(e){var t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"c":case"cc":return Ar(t.length,e,o);case"co":return n.ordinalNumber(e,{unit:"day",valueCallback:o});case"ccc":return n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});case"ccccc":return n.day(e,{width:"narrow",context:"standalone"});case"cccccc":return n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});case"cccc":default:return n.day(e,{width:"wide",context:"standalone"})||n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"})}},validate:function(e,t,n){return t>=0&&t<=6},set:function(e,t,n,r){return(e=or(e,n,r)).setUTCHours(0,0,0,0),e},incompatibleTokens:["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]},i:{priority:90,parse:function(e,t,n,r){var o=function(e){return 0===e?7:e};switch(t){case"i":case"ii":return Ar(t.length,e);case"io":return n.ordinalNumber(e,{unit:"day"});case"iii":return n.day(e,{width:"abbreviated",context:"formatting",valueCallback:o})||n.day(e,{width:"short",context:"formatting",valueCallback:o})||n.day(e,{width:"narrow",context:"formatting",valueCallback:o});case"iiiii":return n.day(e,{width:"narrow",context:"formatting",valueCallback:o});case"iiiiii":return n.day(e,{width:"short",context:"formatting",valueCallback:o})||n.day(e,{width:"narrow",context:"formatting",valueCallback:o});case"iiii":default:return n.day(e,{width:"wide",context:"formatting",valueCallback:o})||n.day(e,{width:"abbreviated",context:"formatting",valueCallback:o})||n.day(e,{width:"short",context:"formatting",valueCallback:o})||n.day(e,{width:"narrow",context:"formatting",valueCallback:o})}},validate:function(e,t,n){return t>=1&&t<=7},set:function(e,t,n,i){return(e=function(e,t){o(2,arguments);var n=r(t);n%7==0&&(n-=7);var i=1,s=a(e),u=s.getUTCDay(),c=((n%7+7)%7<i?7:0)+n-u;return s.setUTCDate(s.getUTCDate()+c),s}(e,n,i)).setUTCHours(0,0,0,0),e},incompatibleTokens:["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]},a:{priority:80,parse:function(e,t,n,r){switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,r){return e.setUTCHours(Ir(n),0,0,0),e},incompatibleTokens:["b","B","H","K","k","t","T"]},b:{priority:80,parse:function(e,t,n,r){switch(t){case"b":case"bb":case"bbb":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,r){return e.setUTCHours(Ir(n),0,0,0),e},incompatibleTokens:["a","B","H","K","k","t","T"]},B:{priority:80,parse:function(e,t,n,r){switch(t){case"B":case"BB":case"BBB":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}},set:function(e,t,n,r){return e.setUTCHours(Ir(n),0,0,0),e},incompatibleTokens:["a","b","t","T"]},h:{priority:70,parse:function(e,t,n,r){switch(t){case"h":return Mr(dr,e);case"ho":return n.ordinalNumber(e,{unit:"hour"});default:return Ar(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=12},set:function(e,t,n,r){var o=e.getUTCHours()>=12;return o&&n<12?e.setUTCHours(n+12,0,0,0):o||12!==n?e.setUTCHours(n,0,0,0):e.setUTCHours(0,0,0,0),e},incompatibleTokens:["H","K","k","t","T"]},H:{priority:70,parse:function(e,t,n,r){switch(t){case"H":return Mr(cr,e);case"Ho":return n.ordinalNumber(e,{unit:"hour"});default:return Ar(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=23},set:function(e,t,n,r){return e.setUTCHours(n,0,0,0),e},incompatibleTokens:["a","b","h","K","k","t","T"]},K:{priority:70,parse:function(e,t,n,r){switch(t){case"K":return Mr(fr,e);case"Ko":return n.ordinalNumber(e,{unit:"hour"});default:return Ar(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=11},set:function(e,t,n,r){return e.getUTCHours()>=12&&n<12?e.setUTCHours(n+12,0,0,0):e.setUTCHours(n,0,0,0),e},incompatibleTokens:["a","b","h","H","k","t","T"]},k:{priority:70,parse:function(e,t,n,r){switch(t){case"k":return Mr(lr,e);case"ko":return n.ordinalNumber(e,{unit:"hour"});default:return Ar(t.length,e)}},validate:function(e,t,n){return t>=1&&t<=24},set:function(e,t,n,r){var o=n<=24?n%24:n;return e.setUTCHours(o,0,0,0),e},incompatibleTokens:["a","b","h","H","K","t","T"]},m:{priority:60,parse:function(e,t,n,r){switch(t){case"m":return Mr(hr,e);case"mo":return n.ordinalNumber(e,{unit:"minute"});default:return Ar(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=59},set:function(e,t,n,r){return e.setUTCMinutes(n,0,0),e},incompatibleTokens:["t","T"]},s:{priority:50,parse:function(e,t,n,r){switch(t){case"s":return Mr(mr,e);case"so":return n.ordinalNumber(e,{unit:"second"});default:return Ar(t.length,e)}},validate:function(e,t,n){return t>=0&&t<=59},set:function(e,t,n,r){return e.setUTCSeconds(n,0),e},incompatibleTokens:["t","T"]},S:{priority:30,parse:function(e,t,n,r){return Ar(t.length,e,(function(e){return Math.floor(e*Math.pow(10,3-t.length))}))},set:function(e,t,n,r){return e.setUTCMilliseconds(n),e},incompatibleTokens:["t","T"]},X:{priority:10,parse:function(e,t,n,r){switch(t){case"X":return Cr(Er,e);case"XX":return Cr(xr,e);case"XXXX":return Cr(Dr,e);case"XXXXX":return Cr(Sr,e);case"XXX":default:return Cr(Lr,e)}},set:function(e,t,n,r){return t.timestampIsSet?e:new Date(e.getTime()-n)},incompatibleTokens:["t","T","x"]},x:{priority:10,parse:function(e,t,n,r){switch(t){case"x":return Cr(Er,e);case"xx":return Cr(xr,e);case"xxxx":return Cr(Dr,e);case"xxxxx":return Cr(Sr,e);case"xxx":default:return Cr(Lr,e)}},set:function(e,t,n,r){return t.timestampIsSet?e:new Date(e.getTime()-n)},incompatibleTokens:["t","T","X"]},t:{priority:40,parse:function(e,t,n,r){return Or(e)},set:function(e,t,n,r){return[new Date(1e3*n),{timestampIsSet:!0}]},incompatibleTokens:"*"},T:{priority:20,parse:function(e,t,n,r){return Or(e)},set:function(e,t,n,r){return[new Date(n),{timestampIsSet:!0}]},incompatibleTokens:"*"}},Ur=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,Rr=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,Fr=/^'([^]*?)'?$/,Wr=/''/g,Br=/\S/,zr=/[a-zA-Z]/;function Qr(e,t,n,i){o(3,arguments);var s=String(e),u=String(t),c=i||{},l=c.locale||nt;if(!l.match)throw new RangeError("locale must contain match property");var f=l.options&&l.options.firstWeekContainsDate,d=null==f?1:r(f),h=null==c.firstWeekContainsDate?d:r(c.firstWeekContainsDate);if(!(h>=1&&h<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=l.options&&l.options.weekStartsOn,p=null==m?0:r(m),g=null==c.weekStartsOn?p:r(c.weekStartsOn);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(""===u)return""===s?a(n):new Date(NaN);var v,y={firstWeekContainsDate:h,weekStartsOn:g,locale:l},b=[{priority:10,subPriority:-1,set:Xr,index:0}],_=u.match(Rr).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Mt[t])(e,l.formatLong,y):e})).join("").match(Ur),k=[];for(v=0;v<_.length;v++){var T=_[v];!c.useAdditionalWeekYearTokens&&Nt(T)&&It(T,u,e),!c.useAdditionalDayOfYearTokens&&At(T)&&It(T,u,e);var E=T[0],x=Yr[E];if(x){var D=x.incompatibleTokens;if(Array.isArray(D)){for(var L=void 0,S=0;S<k.length;S++){var M=k[S].token;if(-1!==D.indexOf(M)||M===E){L=k[S];break}}if(L)throw new RangeError("The format string mustn't contain `".concat(L.fullToken,"` and `").concat(T,"` at the same time"))}else if("*"===x.incompatibleTokens&&k.length)throw new RangeError("The format string mustn't contain `".concat(T,"` and any other token at the same time"));k.push({token:E,fullToken:T});var C=x.parse(s,T,l.match,y);if(!C)return new Date(NaN);b.push({priority:x.priority,subPriority:x.subPriority||0,set:x.set,validate:x.validate,value:C.value,index:b.length}),s=C.rest}else{if(E.match(zr))throw new RangeError("Format string contains an unescaped latin alphabet character `"+E+"`");if("''"===T?T="'":"'"===E&&(T=Gr(T)),0!==s.indexOf(T))return new Date(NaN);s=s.slice(T.length)}}if(s.length>0&&Br.test(s))return new Date(NaN);var O=b.map((function(e){return e.priority})).sort((function(e,t){return t-e})).filter((function(e,t,n){return n.indexOf(e)===t})).map((function(e){return b.filter((function(t){return t.priority===e})).sort((function(e,t){return t.subPriority-e.subPriority}))})).map((function(e){return e[0]})),A=a(n);if(isNaN(A))return new Date(NaN);var N=rt(A,w(A)),I={};for(v=0;v<O.length;v++){var j=O[v];if(j.validate&&!j.validate(N,j.value,y))return new Date(NaN);var q=j.set(N,I,j.value,y);q[0]?(N=q[0],Ft(I,q[1])):N=q}return N}function Xr(e,t){if(t.timestampIsSet)return e;var n=new Date(0);return n.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),n.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),n}function Gr(e){return e.match(Fr)[1].replace(Wr,"'")}function Zr(e,t,n){return o(2,arguments),Z(Qr(e,t,new Date,n))}function Kr(e){return o(1,arguments),1===a(e).getDay()}function Vr(e){return o(1,arguments),a(e).getTime()<Date.now()}function Jr(e){o(1,arguments);var t=a(e);return t.setMinutes(0,0,0),t}function $r(e,t){o(2,arguments);var n=Jr(e),r=Jr(t);return n.getTime()===r.getTime()}function eo(e,t,n){o(2,arguments);var r=g(e,n),a=g(t,n);return r.getTime()===a.getTime()}function to(e,t){return o(2,arguments),eo(e,t,{weekStartsOn:1})}function no(e,t){o(2,arguments);var n=b(e),r=b(t);return n.getTime()===r.getTime()}function ro(e,t){o(2,arguments);var n=xe(e),r=xe(t);return n.getTime()===r.getTime()}function oo(e,t){o(2,arguments);var n=a(e),r=a(t);return n.getFullYear()===r.getFullYear()&&n.getMonth()===r.getMonth()}function ao(e,t){o(2,arguments);var n=Se(e),r=Se(t);return n.getTime()===r.getTime()}function io(e){o(1,arguments);var t=a(e);return t.setMilliseconds(0),t}function so(e,t){o(2,arguments);var n=io(e),r=io(t);return n.getTime()===r.getTime()}function uo(e,t){o(2,arguments);var n=a(e),r=a(t);return n.getFullYear()===r.getFullYear()}function co(e){return o(1,arguments),$r(Date.now(),e)}function lo(e){return o(1,arguments),to(e,Date.now())}function fo(e){return o(1,arguments),ro(Date.now(),e)}function ho(e){return o(1,arguments),oo(Date.now(),e)}function mo(e){return o(1,arguments),ao(Date.now(),e)}function po(e){return o(1,arguments),so(Date.now(),e)}function go(e,t){return o(1,arguments),eo(e,Date.now(),t)}function vo(e){return o(1,arguments),uo(e,Date.now())}function yo(e){return o(1,arguments),4===a(e).getDay()}function bo(e){return o(1,arguments),K(e,Date.now())}function wo(e){return o(1,arguments),K(e,i(Date.now(),1))}function _o(e){return o(1,arguments),2===a(e).getDay()}function ko(e){return o(1,arguments),3===a(e).getDay()}function To(e,t){o(2,arguments);var n=a(e).getTime(),r=a(t.start).getTime(),i=a(t.end).getTime();if(!(r<=i))throw new RangeError("Invalid interval");return n>=r&&n<=i}function Eo(e){return o(1,arguments),K(e,Bn(Date.now(),1))}function xo(e){o(1,arguments);var t=a(e),n=t.getFullYear(),r=9+10*Math.floor(n/10);return t.setFullYear(r+1,0,0),t.setHours(0,0,0,0),t}function Do(e,t){o(1,arguments);var n=t||{},i=n.locale,s=i&&i.options&&i.options.weekStartsOn,u=null==s?0:r(s),c=null==n.weekStartsOn?u:r(n.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6");var l=a(e),f=l.getDay(),d=6+(f<c?-7:0)-(f-c);return l.setHours(0,0,0,0),l.setDate(l.getDate()+d),l}function Lo(e){return o(1,arguments),Do(e,{weekStartsOn:1})}function So(e){o(1,arguments);var t=y(e),n=new Date(0);n.setFullYear(t+1,0,4),n.setHours(0,0,0,0);var r=v(n);return r.setDate(r.getDate()-1),r}function Mo(e){o(1,arguments);var t=a(e),n=t.getMonth(),r=n-n%3+3;return t.setMonth(r,0),t.setHours(0,0,0,0),t}function Co(e){o(1,arguments);var t=a(e),n=t.getFullYear();return t.setFullYear(n+1,0,0),t.setHours(0,0,0,0),t}var Oo=/(\w)\1*|''|'(''|[^'])+('|$)|./g,Ao=/^'([^]*?)'?$/,No=/''/g,Io=/[a-zA-Z]/;function jo(e,t){o(2,arguments);var n=a(e);if(!Z(n))throw new RangeError("Invalid time value");var r=w(n),i=rt(n,r),s=t.match(Oo);if(!s)return"";var u=s.map((function(e){if("''"===e)return"'";var t=e[0];if("'"===t)return qo(e);var n=at[t];if(n)return n(i,e);if(t.match(Io))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return e})).join("");return u}function qo(e){var t=e.match(Ao);return t?t[1].replace(No,"'"):e}function Po(e){var t,n;if(o(1,arguments),e&&"function"==typeof e.forEach)t=e;else{if("object"!=typeof e||null===e)return new Date(NaN);t=Array.prototype.slice.call(e)}return t.forEach((function(e){var t=a(e);(void 0===n||n<t||isNaN(Number(t)))&&(n=t)})),n||new Date(NaN)}var Ho=365.2425;function Yo(e){var t=e.years,n=e.months,r=e.weeks,a=e.days,i=e.hours,s=e.minutes,u=e.seconds;o(1,arguments);var c=0;t&&(c+=t*Ho),n&&(c+=30.436875*n),r&&(c+=7*r),a&&(c+=a);var l=24*c*60*60;return i&&(l+=60*i*60),s&&(l+=60*s),u&&(l+=u),Math.round(1e3*l)}function Uo(e){o(1,arguments);var t=e/Y;return Math.floor(t)}function Ro(e){o(1,arguments);var t=e/H;return Math.floor(t)}function Fo(e){o(1,arguments);var t=e/U;return Math.floor(t)}function Wo(e){var t,n;if(o(1,arguments),e&&"function"==typeof e.forEach)t=e;else{if("object"!=typeof e||null===e)return new Date(NaN);t=Array.prototype.slice.call(e)}return t.forEach((function(e){var t=a(e);(void 0===n||n>t||isNaN(t.getDate()))&&(n=t)})),n||new Date(NaN)}function Bo(e){o(1,arguments);var t=e/F;return Math.floor(t)}function zo(e){return o(1,arguments),Math.floor(e*H)}function Qo(e){return o(1,arguments),Math.floor(e*X)}function Xo(e){o(1,arguments);var t=e/W;return Math.floor(t)}function Go(e){o(1,arguments);var t=e/B;return Math.floor(t)}var Zo=[7,6,5,4,3,2,1];function Ko(e,t){o(2,arguments);var n=Vo(t);return i(a(e),n[hn(a(e))])}function Vo(e){if(0===e)return Zo;var t=Zo.slice(-e),n=Zo.slice(0,Zo.length-e);return t.concat(n)}function Jo(e){return o(1,arguments),Ko(a(e),5)}function $o(e){return o(1,arguments),Ko(a(e),1)}function ea(e){return o(1,arguments),Ko(a(e),6)}function ta(e){return o(1,arguments),Ko(a(e),0)}function na(e){return o(1,arguments),Ko(a(e),4)}function ra(e){return o(1,arguments),Ko(a(e),2)}function oa(e){return o(1,arguments),Ko(a(e),3)}var aa=36e5,ia={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},sa=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,ua=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,ca=/^([+-])(\d{2})(?::?(\d{2}))?$/;function la(e,t){o(1,arguments);var n=t||{},a=null==n.additionalDigits?2:r(n.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var i,s=fa(e);if(s.date){var u=da(s.date,a);i=ha(u.restDateString,u.year)}if(isNaN(i)||!i)return new Date(NaN);var c,l=i.getTime(),f=0;if(s.time&&(f=pa(s.time),isNaN(f)||null===f))return new Date(NaN);if(!s.timezone){var d=new Date(l+f),h=new Date(0);return h.setFullYear(d.getUTCFullYear(),d.getUTCMonth(),d.getUTCDate()),h.setHours(d.getUTCHours(),d.getUTCMinutes(),d.getUTCSeconds(),d.getUTCMilliseconds()),h}return c=va(s.timezone),isNaN(c)?new Date(NaN):new Date(l+f+c)}function fa(e){var t,n={},r=e.split(ia.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?(n.date=null,t=r[0]):(n.date=r[0],t=r[1],ia.timeZoneDelimiter.test(n.date)&&(n.date=e.split(ia.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var o=ia.timezone.exec(t);o?(n.time=t.replace(o[1],""),n.timezone=o[1]):n.time=t}return n}function da(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:null};var o=r[1]&&parseInt(r[1]),a=r[2]&&parseInt(r[2]);return{year:null==a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}function ha(e,t){if(null===t)return null;var n=e.match(sa);if(!n)return null;var r=!!n[4],o=ma(n[1]),a=ma(n[2])-1,i=ma(n[3]),s=ma(n[4]),u=ma(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,s,u)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=r.getUTCDay()||7,a=7*(t-1)+n+1-o;return r.setUTCDate(r.getUTCDate()+a),r}(t,s,u):new Date(NaN);var c=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(ya[t]||(ba(e)?29:28))}(t,a,i)&&function(e,t){return t>=1&&t<=(ba(e)?366:365)}(t,o)?(c.setUTCFullYear(t,a,Math.max(o,i)),c):new Date(NaN)}function ma(e){return e?parseInt(e):1}function pa(e){var t=e.match(ua);if(!t)return null;var n=ga(t[1]),r=ga(t[2]),o=ga(t[3]);return function(e,t,n){if(24===e)return 0===t&&0===n;return n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?n*aa+6e4*r+1e3*o:NaN}function ga(e){return e&&parseFloat(e.replace(",","."))||0}function va(e){if("Z"===e)return 0;var t=e.match(ca);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(r*aa+6e4*o):NaN}var ya=[31,null,31,30,31,30,31,31,30,31,30,31];function ba(e){return e%400==0||e%4==0&&e%100}function wa(e){if(o(1,arguments),"string"==typeof e){var t=e.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return t?new Date(Date.UTC(+t[1],+t[2]-1,+t[3],+t[4]-(+t[9]||0)*("-"==t[8]?-1:1),+t[5]-(+t[10]||0)*("-"==t[8]?-1:1),+t[6],+((t[7]||"0")+"00").substring(0,3))):new Date(NaN)}return a(e)}function _a(e){return o(1,arguments),Math.floor(e*W)}function ka(e){o(1,arguments);var t=e/z;return Math.floor(t)}function Ta(e,t){if(arguments.length<1)throw new TypeError("1 argument required, but only none provided present");var n=t&&"nearestTo"in t?r(t.nearestTo):1;if(n<1||n>30)throw new RangeError("`options.nearestTo` must be between 1 and 30");var o=a(e),i=o.getSeconds(),s=o.getMinutes()+i/60,u=Math.floor(s/n)*n,c=s%n,l=Math.round(c/n)*n;return new Date(o.getFullYear(),o.getMonth(),o.getDate(),o.getHours(),u+l)}function Ea(e){o(1,arguments);var t=e/Q;return Math.floor(t)}function xa(e){return o(1,arguments),e*U}function Da(e){o(1,arguments);var t=e/X;return Math.floor(t)}function La(e,t){o(2,arguments);var n=a(e),i=r(t),s=n.getFullYear(),u=n.getDate(),c=new Date(0);c.setFullYear(s,i,15),c.setHours(0,0,0,0);var l=pn(c);return n.setMonth(i,Math.min(u,l)),n}function Sa(e,t){if(o(2,arguments),"object"!=typeof t||null===t)throw new RangeError("values parameter must be an object");var n=a(e);return isNaN(n.getTime())?new Date(NaN):(null!=t.year&&n.setFullYear(t.year),null!=t.month&&(n=La(n,t.month)),null!=t.date&&n.setDate(r(t.date)),null!=t.hours&&n.setHours(r(t.hours)),null!=t.minutes&&n.setMinutes(r(t.minutes)),null!=t.seconds&&n.setSeconds(r(t.seconds)),null!=t.milliseconds&&n.setMilliseconds(r(t.milliseconds)),n)}function Ma(e,t){o(2,arguments);var n=a(e),i=r(t);return n.setDate(i),n}function Ca(e,t,n){o(2,arguments);var s=n||{},u=s.locale,c=u&&u.options&&u.options.weekStartsOn,l=null==c?0:r(c),f=null==s.weekStartsOn?l:r(s.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=a(e,s),h=r(t),m=d.getDay(),p=h%7,g=(p+7)%7,v=7-f,y=h<0||h>6?h-(m+v)%7:(g+v)%7-(m+v)%7;return i(d,y,s)}function Oa(e,t){o(2,arguments);var n=a(e),i=r(t);return n.setMonth(0),n.setDate(i),n}function Aa(e,t){o(2,arguments);var n=a(e),i=r(t);return n.setHours(i),n}function Na(e,t){o(2,arguments);var n=a(e),s=r(t),u=wn(n),c=s-u;return i(n,c)}function Ia(e,t){o(2,arguments);var n=a(e),i=r(t),s=kn(n)-i;return n.setDate(n.getDate()-7*s),n}function ja(e,t){o(2,arguments);var n=a(e),i=r(t);return n.setMilliseconds(i),n}function qa(e,t){o(2,arguments);var n=a(e),i=r(t);return n.setMinutes(i),n}function Pa(e,t){o(2,arguments);var n=a(e),i=r(t),s=Math.floor(n.getMonth()/3)+1,u=i-s;return La(n,n.getMonth()+3*u)}function Ha(e,t){o(2,arguments);var n=a(e),i=r(t);return n.setSeconds(i),n}function Ya(e,t,n){o(2,arguments);var i=a(e),s=r(t),u=qn(i,n)-s;return i.setDate(i.getDate()-7*u),i}function Ua(e,t,n){o(2,arguments);var i=n||{},s=i.locale,u=s&&s.options&&s.options.firstWeekContainsDate,c=null==u?1:r(u),l=null==i.firstWeekContainsDate?c:r(i.firstWeekContainsDate),f=a(e),d=r(t),h=T(f,In(f,n)),m=new Date(0);return m.setFullYear(d,0,l),m.setHours(0,0,0,0),(f=In(m,n)).setDate(f.getDate()+h),f}function Ra(e,t){o(2,arguments);var n=a(e),i=r(t);return isNaN(n.getTime())?new Date(NaN):(n.setFullYear(i),n)}function Fa(e){o(1,arguments);var t=a(e),n=t.getFullYear(),r=10*Math.floor(n/10);return t.setFullYear(r,0,1),t.setHours(0,0,0,0),t}function Wa(){return _(Date.now())}function Ba(){var e=new Date,t=e.getFullYear(),n=e.getMonth(),r=e.getDate(),o=new Date(0);return o.setFullYear(t,n,r+1),o.setHours(0,0,0,0),o}function za(){var e=new Date,t=e.getFullYear(),n=e.getMonth(),r=e.getDate(),o=new Date(0);return o.setFullYear(t,n,r-1),o.setHours(0,0,0,0),o}function Qa(e,t){o(2,arguments);var n=r(t);return d(e,-n)}function Xa(e,t){o(2,arguments);var n=r(t);return p(e,-n)}function Ga(e,t){o(2,arguments);var n=r(t);return D(e,-n)}function Za(e,t){o(2,arguments);var n=r(t);return L(e,-n)}function Ka(e,t){o(2,arguments);var n=r(t);return S(e,-n)}function Va(e,t){o(2,arguments);var n=r(t);return M(e,-n)}function Ja(e,t){o(2,arguments);var n=r(t);return C(e,-n)}function $a(e){return o(1,arguments),Math.floor(e*q)}function ei(e){return o(1,arguments),Math.floor(e*B)}function ti(e){return o(1,arguments),Math.floor(e*z)}},364:function(e,t,n){"use strict";n.r(t)},89:function(e,t,n){"use strict";n.r(t)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",s=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function c(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,a=Object.create(o.prototype),i=new S(r||[]);return a._invoke=function(e,t,n){var r=f;return function(o,a){if(r===h)throw new Error("Generator is already running");if(r===m){if("throw"===o)throw a;return C()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var s=x(i,n);if(s){if(s===p)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=m,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=h;var u=l(e,t,n);if("normal"===u.type){if(r=n.done?m:d,u.arg===p)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=m,n.method="throw",n.arg=u.arg)}}}(e,n,i),a}function l(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=c;var f="suspendedStart",d="suspendedYield",h="executing",m="completed",p={};function g(){}function v(){}function y(){}var b={};b[a]=function(){return this};var w=Object.getPrototypeOf,_=w&&w(w(M([])));_&&_!==n&&r.call(_,a)&&(b=_);var k=y.prototype=g.prototype=Object.create(b);function T(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(o,a,i,s){var u=l(e[o],e,a);if("throw"!==u.type){var c=u.arg,f=c.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,i,s)}),(function(e){n("throw",e,i,s)})):t.resolve(f).then((function(e){c.value=e,i(c)}),(function(e){return n("throw",e,i,s)}))}s(u.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function x(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,x(e,n),"throw"===n.method))return p;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var o=l(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,p;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,p):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,p)}function D(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function L(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function S(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(D,this),this.reset(!0)}function M(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:C}}function C(){return{value:t,done:!0}}return v.prototype=k.constructor=y,y.constructor=v,v.displayName=u(y,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,u(e,s,"GeneratorFunction")),e.prototype=Object.create(k),e},e.awrap=function(e){return{__await:e}},T(E.prototype),E.prototype[i]=function(){return this},e.AsyncIterator=E,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new E(c(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},T(k),u(k,s,"Generator"),k[a]=function(){return this},k.toString=function(){return"[object Generator]"},e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=M,S.prototype={constructor:S,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(L),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return s.type="throw",s.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],s=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,p):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),L(n),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;L(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:M(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),p}},e}(e.exports);try{regeneratorRuntime=t}catch(e){Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r](a,a.exports,n),a.loaded=!0,a.exports}n.amdO={},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.hmd=function(e){return(e=Object.create(e)).children||(e.children=[]),Object.defineProperty(e,"exports",{enumerable:!0,set:function(){throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+e.id)}}),e},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e}(),document.querySelector(".user__email")&&n(231),document.querySelector(".reg_user_name")&&n(625),document.querySelector(".form__comment")&&n(793),document.querySelector(".btn__delete-answer")&&n(369),document.querySelector(".btn__update-answer")&&n(369),document.querySelector(".password_reset__loading")&&n(857),n(835),n(49),n(485),n(18),n(205),n(905),n(429),n(635),n(6),n(104),n(599),n(364),n(89)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,